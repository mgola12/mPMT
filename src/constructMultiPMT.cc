/*
Author:    Mohit Gola 10th July 2023
*/

#include "constructMultiPMT.hh"
#include "construction.hh"
#include "WCSimTuningParameters.hh"
#include <string>
#include <sstream>

ConstructMultiPMT::ConstructMultiPMT(myDetectorConstruction* detectorConstruction, G4LogicalVolume* logicPMT) : detectorConstruction(detectorConstruction), logicPMT(logicPMT) {}

ConstructMultiPMT::~ConstructMultiPMT() {}

G4VPhysicalVolume* ConstructMultiPMT::Construct() {
  
  G4double pmtGlassRadius = 51.0*mm;
  G4double pmtGlassThickness = 2.0*mm;

  ///////////////////construct material/////////////////////
  G4NistManager *nist = G4NistManager::Instance();
  G4Material *Air = nist->FindOrBuildMaterial("G4_AIR");

  /////////////////////Aluminum///////////////////

  a = 26.98*g/mole;
  G4Element* elAl = new G4Element("Aluminum", "Al", 13, a);

  density = 2.7*g/cm3;
  G4Material* Aluminum
    = new G4Material("Aluminum",density,1);
  Aluminum->AddElement(elAl, 1);

  ///////////////////////Silica Gel///////////////////////
  a = 28.09*g/mole;
  G4Element* elSi = new G4Element("Silicon", "Si", 14., a);

  density = 0.98*g/cm3;
  G4Material *SilGel
    = new G4Material("SilGel",density,1);
  SilGel->AddElement(elSi, 1);

  ////////////////////PLA///////////////////////                                                                             a = 1.01*g/mole;
  G4Element* elH
    = new G4Element("Hydrogen","H", 1,a);
  G4Element *elC = new G4Element("Carbon", "C", 6, 12.01*g/mole);

  density = 0.95*g/cm3;
  G4Material* Plastic
    = new G4Material("Plastic",density,2);
  Plastic->AddElement(elC, 1);
  Plastic->AddElement(elH, 2);

  //////////////Water///////////////////                                                                                    
  a = 16.00*g/mole;
  G4Element* elO
    = new G4Element("Oxygen","O", 8,a);

  density = 1.00*g/cm3;
  G4Material* Water
    = new G4Material("Water",density,2);
  Water->AddElement(elH, 2);
  Water->AddElement(elO, 1);


  ////////////////////////////Acrylic//////////////////////

G4Material* Acrylic
  = nist->FindOrBuildMaterial("G4_PLEXIGLASS");

  //////////////////////Material Properties////////////////

  const G4int NUMENTRIES_ref = 501;

  G4double ENERGY_ref[NUMENTRIES_ref] = { 1.7712e-09, 1.77374e-09, 1.77628e-09, 1.77883e-09, 1.78138e-09, 1.78395e-09, 
					  1.78652e-09, 1.78909e-09, 1.79168e-09, 1.79427e-09, 1.79687e-09, 1.79948e-09, 
					  1.8021e-09, 1.80472e-09, 1.80735e-09, 1.80999e-09, 1.81263e-09, 1.81529e-09, 
					  1.81795e-09, 1.82062e-09, 1.8233e-09, 1.82598e-09, 1.82868e-09, 1.83138e-09, 
					  1.83409e-09, 1.8368e-09, 1.83953e-09, 1.84226e-09, 1.845e-09, 1.84775e-09, 
					  1.85051e-09, 1.85328e-09, 1.85605e-09, 1.85883e-09, 1.86162e-09, 1.86442e-09, 
					  1.86723e-09, 1.87005e-09, 1.87287e-09, 1.87571e-09, 1.87855e-09, 1.8814e-09, 
					  1.88426e-09, 1.88713e-09, 1.89e-09, 1.89289e-09, 1.89578e-09, 1.89869e-09, 
					  1.9016e-09, 1.90452e-09, 1.90745e-09, 1.91039e-09, 1.91334e-09, 1.91629e-09, 
					  1.91926e-09, 1.92224e-09, 1.92522e-09, 1.92821e-09, 1.93122e-09, 1.93423e-09, 
					  1.93725e-09, 1.94028e-09, 1.94333e-09, 1.94638e-09, 1.94944e-09, 1.95251e-09, 
					  1.95559e-09, 1.95868e-09, 1.96178e-09, 1.96488e-09, 1.968e-09, 1.97113e-09, 
					  1.97427e-09, 1.97742e-09, 1.98058e-09, 1.98375e-09, 1.98693e-09, 1.99012e-09, 
					  1.99332e-09, 1.99652e-09, 1.99975e-09, 2.00298e-09, 2.00622e-09, 2.00947e-09, 
					  2.01273e-09, 2.016e-09, 2.01929e-09, 2.02258e-09, 2.02589e-09, 2.0292e-09, 
					  2.03253e-09, 2.03587e-09, 2.03921e-09, 2.04257e-09, 2.04594e-09, 2.04933e-09, 
					  2.05272e-09, 2.05612e-09, 2.05954e-09, 2.06297e-09, 2.0664e-09, 2.06985e-09, 
					  2.07331e-09, 2.07679e-09, 2.08027e-09, 2.08377e-09, 2.08728e-09, 2.0908e-09, 
					  2.09433e-09, 2.09787e-09, 2.10143e-09, 2.10499e-09, 2.10857e-09, 2.11217e-09, 
					  2.11577e-09, 2.11939e-09, 2.12302e-09, 2.12666e-09, 2.13031e-09, 2.13398e-09, 
					  2.13766e-09, 2.14135e-09, 2.14506e-09, 2.14877e-09, 2.1525e-09, 2.15625e-09, 
					  2.16e-09, 2.16377e-09, 2.16756e-09, 2.17135e-09, 2.17516e-09, 2.17898e-09, 
					  2.18282e-09, 2.18667e-09, 2.19053e-09, 2.19441e-09, 2.1983e-09, 2.20221e-09, 
					  2.20612e-09, 2.21006e-09, 2.214e-09, 2.21796e-09, 2.22194e-09, 2.22593e-09, 
					  2.22993e-09, 2.23395e-09, 2.23798e-09, 2.24203e-09, 2.24609e-09, 2.25017e-09, 
					  2.25426e-09, 2.25836e-09, 2.26249e-09, 2.26662e-09, 2.27077e-09, 2.27494e-09, 
					  2.27912e-09, 2.28332e-09, 2.28753e-09, 2.29176e-09, 2.296e-09, 2.30026e-09, 
					  2.30454e-09, 2.30883e-09, 2.31314e-09, 2.31746e-09, 2.3218e-09, 2.32616e-09, 
					  2.33053e-09, 2.33492e-09, 2.33932e-09, 2.34375e-09, 2.34819e-09, 
					  2.35264e-09, 2.35711e-09, 2.3616e-09, 2.36611e-09, 2.37063e-09, 2.37518e-09, 
					  2.37974e-09, 2.38431e-09, 2.38891e-09, 2.39352e-09, 2.39815e-09, 2.40279e-09, 
					  2.40746e-09, 2.41214e-09, 2.41685e-09, 2.42157e-09, 2.42631e-09, 2.43106e-09, 
					  2.43584e-09, 2.44063e-09, 2.44545e-09, 2.45028e-09, 2.45513e-09, 2.46e-09, 
					  2.46489e-09, 2.4698e-09, 2.47473e-09, 2.47968e-09, 2.48465e-09, 2.48964e-09, 
					  2.49465e-09, 2.49968e-09, 2.50473e-09, 2.5098e-09, 2.51489e-09, 2.52e-09, 
					  2.52514e-09, 2.53029e-09, 2.53546e-09, 2.54066e-09, 2.54588e-09, 2.55112e-09, 
					  2.55638e-09, 2.56166e-09, 2.56696e-09, 2.57229e-09, 2.57763e-09, 2.583e-09, 
					  2.5884e-09, 2.59381e-09, 2.59925e-09, 2.60471e-09, 2.61019e-09, 2.6157e-09, 
					  2.62123e-09, 2.62678e-09, 2.63236e-09, 2.63796e-09, 2.64359e-09, 2.64924e-09, 
					  2.65491e-09, 2.66061e-09, 2.66633e-09, 2.67207e-09, 2.67784e-09, 2.68364e-09, 
					  2.68946e-09, 2.69531e-09, 2.70118e-09, 2.70708e-09, 2.713e-09, 2.71895e-09, 
					  2.72493e-09, 2.73093e-09, 2.73696e-09, 2.74301e-09, 2.7491e-09, 2.7552e-09, 
					  2.76134e-09, 2.7675e-09, 2.7737e-09, 2.77991e-09, 2.78616e-09, 2.79244e-09, 
					  2.79874e-09, 2.80507e-09, 2.81143e-09, 2.81782e-09, 2.82424e-09, 2.83069e-09, 
					  2.83717e-09, 2.84367e-09, 2.85021e-09, 2.85678e-09, 2.86338e-09, 2.87e-09, 
					  2.87666e-09, 2.88335e-09, 2.89007e-09, 2.89683e-09, 2.90361e-09, 2.91043e-09, 
					  2.91728e-09, 2.92416e-09, 2.93107e-09, 2.93801e-09, 2.94499e-09, 2.952e-09, 
					  2.95905e-09, 2.96613e-09, 2.97324e-09, 2.98039e-09, 2.98757e-09, 2.99479e-09, 
					  3.00204e-09, 3.00933e-09, 3.01665e-09, 3.024e-09, 3.0314e-09, 3.03883e-09, 
					  3.04629e-09, 3.0538e-09, 3.06134e-09, 3.06892e-09, 3.07653e-09, 3.08418e-09, 
					  3.09188e-09, 3.0996e-09, 3.10737e-09, 3.11518e-09, 3.12303e-09, 3.13091e-09, 
					  3.13884e-09, 3.14681e-09, 3.15481e-09, 3.16286e-09, 3.17095e-09, 3.17908e-09, 
					  3.18725e-09, 3.19547e-09, 3.20373e-09, 3.21203e-09, 3.22037e-09, 3.22876e-09, 
					  3.23719e-09, 3.24566e-09, 3.25418e-09, 3.26274e-09, 3.27135e-09, 3.28001e-09, 
					  3.28871e-09, 3.29745e-09, 3.30625e-09, 3.31509e-09, 3.32397e-09, 3.33291e-09, 
					  3.34189e-09, 3.35092e-09, 3.36001e-09, 3.36914e-09, 3.37832e-09, 3.38755e-09, 
					  3.39683e-09, 3.40616e-09, 3.41554e-09, 3.42498e-09, 3.43447e-09, 3.44401e-09, 
					  3.4536e-09, 3.46325e-09, 3.47295e-09, 3.4827e-09, 3.49251e-09, 3.50238e-09, 
					  3.5123e-09, 3.52228e-09, 3.53231e-09, 3.54241e-09, 3.55256e-09, 3.56276e-09, 
					  3.57303e-09, 3.58336e-09, 3.59374e-09, 3.60419e-09, 3.6147e-09, 3.62527e-09, 
					  3.6359e-09, 3.64659e-09, 3.65735e-09, 3.66817e-09, 3.67906e-09, 3.69001e-09, 
					  3.70102e-09, 3.7121e-09, 3.72325e-09, 3.73446e-09, 3.74575e-09, 3.7571e-09, 
					  3.76852e-09, 3.78001e-09, 3.79157e-09, 3.8032e-09, 3.8149e-09, 3.82667e-09, 
					  3.83852e-09, 3.85044e-09, 3.86244e-09, 3.87451e-09, 3.88665e-09, 3.89887e-09, 
					  3.91117e-09, 3.92355e-09, 3.93601e-09, 3.94854e-09, 3.96116e-09, 3.97385e-09, 
					  3.98663e-09, 3.99949e-09, 4.01243e-09, 4.02546e-09, 4.03857e-09, 4.05177e-09, 
					  4.06506e-09, 4.07843e-09, 4.09189e-09, 4.10544e-09, 4.11908e-09, 4.13281e-09, 
					  4.14663e-09, 4.16054e-09, 4.17455e-09, 4.18866e-09, 4.20285e-09, 4.21715e-09, 
					  4.23154e-09, 4.24603e-09, 4.26063e-09, 4.27532e-09, 4.29011e-09, 4.30501e-09, 
					  4.32001e-09, 4.33511e-09, 4.35032e-09, 4.36564e-09, 4.38107e-09, 4.3966e-09, 
					  4.41225e-09, 4.42801e-09, 4.44388e-09, 4.45986e-09, 4.47596e-09, 4.49218e-09, 
					  4.50852e-09, 4.52497e-09, 4.54155e-09, 4.55824e-09, 4.57506e-09, 4.59201e-09, 
					  4.60908e-09, 4.62628e-09, 4.6436e-09, 4.66106e-09, 4.67865e-09, 4.69637e-09, 
					  4.71423e-09, 4.73222e-09, 4.75035e-09, 4.76862e-09, 4.78703e-09, 4.80559e-09, 
					  4.82429e-09, 4.84313e-09, 4.86213e-09, 4.88127e-09, 4.90056e-09, 4.92001e-09, 
					  4.93961e-09, 4.95937e-09, 4.97929e-09, 4.99936e-09, 5.0196e-09, 5.04001e-09, 
					  5.06058e-09, 5.08132e-09, 5.10223e-09, 5.12331e-09, 5.14457e-09, 5.16601e-09, 
					  5.18762e-09, 5.20942e-09, 5.2314e-09, 5.25357e-09, 5.27592e-09, 5.29847e-09, 
					  5.32121e-09, 5.34415e-09, 5.36728e-09, 5.39062e-09, 5.41416e-09, 5.4379e-09, 
					  5.46186e-09, 5.48603e-09, 5.51041e-09, 5.53501e-09, 5.55983e-09, 5.58487e-09, 
					  5.61014e-09, 5.63565e-09, 5.66138e-09, 5.68735e-09, 5.71356e-09, 5.74001e-09, 
					  5.76671e-09, 5.79365e-09, 5.82085e-09, 5.84831e-09, 5.87603e-09, 5.90401e-09, 
					  5.93226e-09, 5.96078e-09, 5.98957e-09, 6.01865e-09, 6.04801e-09, 6.07766e-09, 
					  6.1076e-09, 6.13783e-09, 6.16837e-09, 6.19921e-09 };

  G4double REFLECTIVITY_ref[NUMENTRIES_ref] = { 91.867018, 91.878821, 91.909624, 91.933169, 91.975042, 91.994669, 
						92.023845, 92.05233, 92.04163, 92.116707, 92.116159, 92.172474, 92.190017, 
						92.18805, 92.234936, 92.254988, 92.28962, 92.306398, 92.334575, 92.357688, 
						92.381986, 92.396137, 92.430164, 92.448784, 92.465907, 92.492628, 
						92.514583, 92.564694, 92.586161, 92.585568, 92.609252, 92.623107, 
						92.653067, 92.670681, 92.69944, 92.71874, 92.74472, 92.735985, 92.774786, 
						92.797425, 92.77678, 92.83881, 92.882547, 92.886619, 92.880202, 92.926185, 
						92.91282, 92.941198, 92.97765, 92.971139, 93.010272, 93.005497, 93.035958, 
						93.064111, 93.085596, 93.108483, 93.1252, 93.113579, 93.144708, 93.159892, 
						93.169539, 93.167694, 93.210855, 93.221407, 93.229929, 93.217626, 
						93.261842, 93.267996, 93.28614, 93.305264, 93.279379, 93.313851, 93.334877,
						93.357556, 93.384519, 93.398249, 93.397436, 93.41664, 93.426486, 93.431823,
						93.442491, 93.463716, 93.500783, 93.516479, 93.504207, 93.518962, 
						93.530918, 93.544686, 93.560372, 93.582261, 93.591123, 93.591639, 
						93.596435, 93.605721, 93.621836, 93.639598, 93.625838, 93.65027, 93.679588,
						93.701544, 93.727586, 93.736008, 93.731122, 93.730506, 93.732266, 
						93.737014, 93.732351, 93.745206, 93.774816, 93.792166, 93.81091, 93.814387,
						93.829906, 93.835502, 93.849515, 93.874573, 93.87148, 93.837158, 93.857773,
						93.88873, 93.908168, 93.917556, 93.931774, 93.956124, 93.966123, 93.963233,
						93.975599, 93.985593, 93.976342, 93.978551, 94.003286, 94.02512, 94.037606,
						94.037748, 94.046234, 94.061184, 94.085374, 94.105208, 94.130384, 
						94.116635, 94.085321, 94.089851, 94.08085, 94.080903, 94.106384, 94.120388,
						94.128558, 94.128922, 94.135115, 94.1421, 94.151582, 94.165153, 94.178154,
						94.191268, 94.201176, 94.197218, 94.199962, 94.206345, 94.217231, 
						94.216899, 94.229288, 94.235705, 94.232253, 94.245712, 94.255995, 
						94.256122, 94.258842, 94.26191, 94.280816, 94.29058, 94.279921, 94.27562, 
						94.297274, 94.310444, 94.316056, 94.319721, 94.326782, 94.322525, 
						94.329357, 94.328025, 94.330324, 94.323669, 94.327122, 94.343237, 
						94.336868, 94.333659, 94.338033, 94.356735, 94.368169, 94.355407, 
						94.343574, 94.340561, 94.336776, 94.315306, 94.281768, 94.247779, 
						94.216414, 94.205492, 94.147018, 94.064085, 93.994456, 93.916984, 
						93.853796, 93.763506, 93.648232, 93.582235, 93.517931, 93.426367, 
						93.344305, 93.276234, 93.235772, 93.186943, 93.167268, 93.151248, 
						93.126298, 93.117566, 93.152638, 93.196265, 93.244511, 93.297256, 
						93.351183, 93.386929, 93.437783, 93.48046, 93.489035, 93.494792, 
						93.507843, 93.521117, 93.50747, 93.552294, 93.569038, 93.554846, 
						93.54536, 93.516454, 93.517806, 93.50129, 93.488663, 93.41786, 93.334727, 
						93.31322, 93.240218, 93.156117, 93.03463, 92.941609, 92.819197, 92.743487, 
						92.660401, 92.548155, 92.433372, 92.295113, 92.23734, 92.134051, 92.041279,
						91.948048, 91.850696, 91.834416, 91.77905, 91.734713, 91.697977, 91.68431, 
						91.645102, 91.564356, 91.502549, 91.471914, 91.375934, 91.319727, 91.25141,
						91.194892, 91.117668, 91.025524, 90.978327, 90.90553, 90.788165, 90.687478,
						90.599473, 90.530206, 90.407009, 90.329717, 90.225505, 90.110879, 
						90.013234, 89.890837, 89.790649, 89.661338, 89.520829, 89.373676, 
						89.26066, 89.094177, 88.966278, 88.799792, 88.655118, 88.49559, 88.305646, 
						88.077914, 87.912389, 87.69281, 87.467818, 87.275388, 87.031673, 86.773113,
						86.518416, 86.211943, 85.960268, 85.638584, 85.344267, 85.031389, 
						84.651235, 84.253471, 83.843647, 83.438015, 82.99535, 82.52885, 82.069422,
						81.525201, 80.920414, 80.305407, 79.638057, 78.943532, 78.211256, 
						77.434004, 76.559918, 75.566542, 73.961647, 72.914792, 71.985872, 
						71.870066, 70.170831, 67.919187, 66.317085, 64.606509, 62.820679, 
						60.919403, 58.910818, 56.816265, 54.628183, 52.432657, 50.238826, 
						48.064867, 46.011777, 44.105821, 42.452535, 41.061547, 39.954065, 
						39.17797, 38.732376, 38.664667, 38.903143, 39.417775, 40.172204, 
						41.096687, 42.153995, 43.298425, 44.4908, 45.674237, 46.857062, 47.960048, 
						49.011047, 50.008499, 50.912678, 51.714986, 52.463473, 53.124773, 
						53.694391, 54.214078, 54.641626, 54.989054, 55.281175, 55.503411, 
						55.669049, 55.809089, 55.879853, 55.877649, 55.851489, 55.789731, 
						55.664089, 55.494965, 55.270052, 55.014417, 54.72109, 54.343811, 
						53.96432, 53.571113, 53.331219, 53.202828, 52.733801, 52.234025, 51.71219, 
						51.148939, 50.605254, 50.016304, 49.404896, 48.785501, 48.143283, 
						47.467895, 46.746983, 46.018764, 45.290908, 44.542634, 43.792217, 43.04205,
						42.264221, 41.504135, 40.76822, 40.020852, 39.292485, 38.603477, 37.930307,
						37.291234, 36.670246, 36.064879, 35.528691, 35.01708, 34.529849, 34.082121,
						33.655095, 33.245391, 32.863984, 32.495056, 32.138775, 31.821843, 
						31.533121, 31.223797, 30.9226, 30.649842, 30.38037, 30.125075, 29.874417, 
						29.637182, 29.410163, 29.184399, 28.967887, 28.748432, 28.537412, 
						28.336286, 28.142074, 27.952112, 27.763106, 27.554904, 27.355905, 
						27.163331, 26.961636, 26.755006, 26.539136, 26.322431, 26.095423, 
						25.867645, 25.637042, 25.402191, 25.155426, 24.900057, 24.639498, 
						24.353394, 24.069377, 23.78243, 23.489127, 23.185162, 22.876163, 22.581776,
						22.300379, 22.014197, 21.738425, 21.477526, 21.218674, 20.982489, 
						20.741723, 20.509995, 20.28618, 20.063595, 19.845714, 19.625256, 19.407225,
						19.188555, 18.965879, 18.715538, 18.485834, 18.247306, 17.989033, 
						17.730006,17.47415, 17.203123, 16.93376, 16.6481, 16.36511, 16.081017, 
						15.78858, 15.510825, 15.234954, 14.960043, 14.689829, 14.43013, 14.181921, 
						13.937926, 13.699244, 13.469614, 13.258739, 13.064613, 12.895495, 
						12.757626, 12.645281, 12.563377, 12.518963};


  const G4int NUMENTRIES_water=60;
  const G4int NUM = 2;

  G4double RINDEX_SilGel[NUMENTRIES_water] =
    {1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404,
     1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404,
     1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404,
     1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404,
     1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404,
     1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404, 1.404};
  
  G4double ENERGY_SilGel[18] = { .1*eV,
				 2.034*eV,2.13*eV,2.18*eV,2.22*eV,2.25*eV,2.3*eV,
				 2.34*eV, 2.43*eV, 2.53*eV, 2.67*eV, 2.79*eV,
				 3.1*eV, 3.28*eV, 3.56*eV, 3.77*eV,4.136*eV, 7.*eV};
  
  G4double ABSORPTION_SilGel[18] = { 0*m,
				     .975*m, .975*m, .966*m, .935*m, .890*m, .898*m,
				     .876*m, .844*m, .786*m, .727*m,  .674*m,
				     .566*m, .485*m, .360*m, .220*m, .220*m, 0*m };
  
  G4double RAYFF = 0.75;
  G4double RAYLEIGH_water[NUMENTRIES_water] = {
    386929*cm*RAYFF,  366249*cm*RAYFF,  346398*cm*RAYFF,  327355*cm*RAYFF,  309097*cm*RAYFF,
    291603*cm*RAYFF,  274853*cm*RAYFF,  258825*cm*RAYFF,  243500*cm*RAYFF,  228856*cm*RAYFF,
    214873*cm*RAYFF,  201533*cm*RAYFF,  188816*cm*RAYFF,  176702*cm*RAYFF,  165173*cm*RAYFF,
    154210*cm*RAYFF,  143795*cm*RAYFF,  133910*cm*RAYFF,  124537*cm*RAYFF,  115659*cm*RAYFF,
    107258*cm*RAYFF, 99318.2*cm*RAYFF, 91822.2*cm*RAYFF,   84754*cm*RAYFF, 78097.3*cm*RAYFF,
    71836.5*cm*RAYFF,   65956*cm*RAYFF, 60440.6*cm*RAYFF, 55275.4*cm*RAYFF, 50445.6*cm*RAYFF,
    45937*cm*RAYFF, 41735.2*cm*RAYFF, 37826.6*cm*RAYFF, 34197.6*cm*RAYFF, 30834.9*cm*RAYFF,
    27725.4*cm*RAYFF, 24856.6*cm*RAYFF, 22215.9*cm*RAYFF, 19791.3*cm*RAYFF, 17570.9*cm*RAYFF,
    15543*cm*RAYFF, 13696.6*cm*RAYFF, 12020.5*cm*RAYFF, 10504.1*cm*RAYFF, 9137.15*cm*RAYFF,
    7909.45*cm*RAYFF,  6811.3*cm*RAYFF, 5833.25*cm*RAYFF,  4966.2*cm*RAYFF, 4201.36*cm*RAYFF,
    3530.28*cm*RAYFF, 2944.84*cm*RAYFF, 2437.28*cm*RAYFF, 2000.18*cm*RAYFF,  1626.5*cm*RAYFF,
    1309.55*cm*RAYFF, 1043.03*cm*RAYFF, 821.016*cm*RAYFF,  637.97*cm*RAYFF, 488.754*cm*RAYFF
  };
  
  G4double ENERGY_water[NUMENTRIES_water] =
    { 1.56962e-09*GeV, 1.58974e-09*GeV, 1.61039e-09*GeV, 1.63157e-09*GeV,
      1.65333e-09*GeV, 1.67567e-09*GeV, 1.69863e-09*GeV, 1.72222e-09*GeV,
      1.74647e-09*GeV, 1.77142e-09*GeV, 1.7971e-09*GeV, 1.82352e-09*GeV,
      1.85074e-09*GeV, 1.87878e-09*GeV, 1.90769e-09*GeV, 1.93749e-09*GeV,
      1.96825e-09*GeV, 1.99999e-09*GeV, 2.03278e-09*GeV, 2.06666e-09*GeV,
      2.10169e-09*GeV, 2.13793e-09*GeV, 2.17543e-09*GeV, 2.21428e-09*GeV,
      2.25454e-09*GeV, 2.29629e-09*GeV, 2.33962e-09*GeV, 2.38461e-09*GeV,
      2.43137e-09*GeV, 2.47999e-09*GeV, 2.53061e-09*GeV, 2.58333e-09*GeV,
      2.63829e-09*GeV, 2.69565e-09*GeV, 2.75555e-09*GeV, 2.81817e-09*GeV,
      2.88371e-09*GeV, 2.95237e-09*GeV, 3.02438e-09*GeV, 3.09999e-09*GeV,
      3.17948e-09*GeV, 3.26315e-09*GeV, 3.35134e-09*GeV, 3.44444e-09*GeV,
      3.54285e-09*GeV, 3.64705e-09*GeV, 3.75757e-09*GeV, 3.87499e-09*GeV,
      3.99999e-09*GeV, 4.13332e-09*GeV, 4.27585e-09*GeV, 4.42856e-09*GeV,
      4.59258e-09*GeV, 4.76922e-09*GeV, 4.95999e-09*GeV, 5.16665e-09*GeV,
      5.39129e-09*GeV, 5.63635e-09*GeV, 5.90475e-09*GeV, 6.19998e-09*GeV };


G4double BLACKABS_blacksheet[NUMENTRIES_water] =
  { 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm,
    1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e8*cm,
    1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e8*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e8*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e9*cm, 1.0e8*cm, 1.0e9*cm,
    1.0e9*cm, 1.0e9*cm};

G4double EFFICIENCY[NUMENTRIES_water] =
  { 0.001*m };


  G4double RINDEX_blacksheet[NUM] =
    { 1.6, 1.6 };
  
  G4double PP[NUM] = { 1.4E-9*GeV,6.2E-9*GeV};
  
  G4double SPECULARLOBECONSTANT[NUM] =
    { 0.3, 0.3 };
  
  G4double SPECULARSPIKECONSTANT[NUM] =
    { 0.2, 0.2 };
  
  G4double BACKSCATTERCONSTANT[NUM] =
    { 0.2, 0.2 };
  
  G4double BSRFF = 2.50;
  G4double REFLECTIVITY_blacksheet[NUMENTRIES_water] =
    { 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF, 0.055*BSRFF,
      0.055*BSRFF, 0.057*BSRFF, 0.059*BSRFF, 0.060*BSRFF,
      0.059*BSRFF, 0.058*BSRFF, 0.057*BSRFF, 0.055*BSRFF,
      0.050*BSRFF, 0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF,
      0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF,
      0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF,
      0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF,
      0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF, 0.045*BSRFF,
      0.045*BSRFF, 0.045*BSRFF };
  
  G4double EFFICIENCY_blacksheet[NUMENTRIES_water] =
   { 0.0 };



G4double ENERGY_skAcrylic[306] =
  { 2.066*eV, 2.070*eV, 2.073*eV, 2.077*eV, 2.080*eV, 2.084*eV, 2.087*eV,
    2.091*eV, 2.094*eV, 2.098*eV, 2.101*eV, 2.105*eV, 2.109*eV, 2.112*eV,
    2.116*eV, 2.119*eV, 2.123*eV, 2.127*eV, 2.130*eV, 2.134*eV, 2.138*eV,
    2.141*eV, 2.145*eV, 2.149*eV, 2.153*eV, 2.156*eV, 2.160*eV, 2.164*eV,
    2.168*eV, 2.171*eV, 2.175*eV, 2.179*eV, 2.183*eV, 2.187*eV, 2.191*eV,
    2.194*eV, 2.198*eV, 2.202*eV, 2.206*eV, 2.210*eV, 2.214*eV, 2.218*eV,
    2.222*eV, 2.226*eV, 2.230*eV, 2.234*eV, 2.238*eV, 2.242*eV, 2.246*eV,
    2.250*eV, 2.254*eV, 2.258*eV, 2.262*eV, 2.267*eV, 2.271*eV, 2.275*eV,
    2.279*eV, 2.283*eV, 2.288*eV, 2.292*eV, 2.296*eV, 2.300*eV, 2.305*eV,
    2.309*eV, 2.313*eV, 2.317*eV, 2.322*eV, 2.326*eV, 2.331*eV, 2.335*eV,
    2.339*eV, 2.344*eV, 2.348*eV, 2.353*eV, 2.357*eV, 2.362*eV, 2.366*eV,
    2.371*eV, 2.375*eV, 2.380*eV, 2.384*eV, 2.389*eV, 2.394*eV, 2.398*eV,
    2.403*eV, 2.407*eV, 2.412*eV, 2.417*eV, 2.422*eV, 2.426*eV, 2.431*eV,
    2.436*eV, 2.441*eV, 2.445*eV, 2.450*eV, 2.455*eV, 2.460*eV, 2.465*eV,
    2.470*eV, 2.475*eV, 2.480*eV, 2.485*eV, 2.490*eV, 2.495*eV, 2.500*eV,
    2.505*eV, 2.510*eV, 2.515*eV, 2.520*eV, 2.525*eV, 2.530*eV, 2.535*eV,
    2.541*eV, 2.546*eV, 2.551*eV, 2.556*eV, 2.562*eV, 2.567*eV, 2.572*eV,
    2.578*eV, 2.583*eV, 2.588*eV, 2.594*eV, 2.599*eV, 2.605*eV, 2.610*eV,
    2.616*eV, 2.621*eV, 2.627*eV, 2.632*eV, 2.638*eV, 2.644*eV, 2.649*eV,
    2.655*eV, 2.661*eV, 2.666*eV, 2.672*eV, 2.678*eV, 2.684*eV, 2.689*eV,
    2.695*eV, 2.701*eV, 2.707*eV, 2.713*eV, 2.719*eV, 2.725*eV, 2.731*eV,
    2.737*eV, 2.743*eV, 2.749*eV, 2.755*eV, 2.761*eV, 2.768*eV, 2.774*eV,
    2.780*eV, 2.786*eV, 2.792*eV, 2.799*eV, 2.805*eV, 2.811*eV, 2.818*eV,
    2.824*eV, 2.831*eV, 2.837*eV, 2.844*eV, 2.850*eV, 2.857*eV, 2.863*eV,
    2.870*eV, 2.877*eV, 2.883*eV, 2.890*eV, 2.897*eV, 2.904*eV, 2.910*eV,
    2.917*eV, 2.924*eV, 2.931*eV, 2.938*eV, 2.945*eV, 2.952*eV, 2.959*eV,
    2.966*eV, 2.973*eV, 2.980*eV, 2.988*eV, 2.995*eV, 3.002*eV, 3.009*eV,
    3.017*eV, 3.024*eV, 3.031*eV, 3.039*eV, 3.046*eV, 3.054*eV, 3.061*eV,
    3.069*eV, 3.077*eV, 3.084*eV, 3.092*eV, 3.100*eV, 3.107*eV, 3.115*eV,
    3.123*eV, 3.131*eV, 3.139*eV, 3.147*eV, 3.155*eV, 3.163*eV, 3.171*eV,
    3.179*eV, 3.187*eV, 3.195*eV, 3.204*eV, 3.212*eV, 3.220*eV, 3.229*eV,
    3.237*eV, 3.246*eV, 3.254*eV, 3.263*eV, 3.271*eV, 3.280*eV, 3.289*eV,
    3.297*eV, 3.306*eV, 3.315*eV, 3.324*eV, 3.333*eV, 3.342*eV, 3.351*eV,
    3.360*eV, 3.369*eV, 3.378*eV, 3.388*eV, 3.397*eV, 3.406*eV, 3.416*eV,
    3.425*eV, 3.434*eV, 3.444*eV, 3.454*eV, 3.463*eV, 3.473*eV, 3.483*eV,
    3.493*eV, 3.502*eV, 3.512*eV, 3.522*eV, 3.532*eV, 3.542*eV, 3.553*eV,
    3.563*eV, 3.573*eV, 3.583*eV, 3.594*eV, 3.604*eV, 3.615*eV, 3.625*eV,
    3.636*eV, 3.647*eV, 3.657*eV, 3.668*eV, 3.679*eV, 3.690*eV, 3.701*eV,
    3.712*eV, 3.723*eV, 3.734*eV, 3.746*eV, 3.757*eV, 3.769*eV, 3.780*eV,
    3.792*eV, 3.803*eV, 3.815*eV, 3.827*eV, 3.839*eV, 3.850*eV, 3.862*eV,
    3.875*eV, 3.887*eV, 3.899*eV, 3.911*eV, 3.924*eV, 3.936*eV, 3.949*eV,
    3.961*eV, 3.974*eV, 3.987*eV, 3.999*eV, 4.012*eV, 4.025*eV, 4.039*eV,
    4.052*eV, 4.065*eV, 4.078*eV, 4.092*eV, 4.105*eV, 4.119*eV, 4.133*eV,
    4.147*eV, 4.161*eV, 4.175*eV, 4.189*eV, 4.203*eV };


G4double RINDEX_skAcrylic[306] =
  {1.4901, 1.4901, 1.4902, 1.4902, 1.4902, 1.4903, 1.4903, 1.4904, 1.4904, 1.4904,
   1.4905, 1.4905, 1.4906, 1.4906, 1.4907, 1.4907, 1.4908, 1.4908, 1.4908, 1.4909,
   1.4909, 1.4910, 1.4910, 1.4911, 1.4911, 1.4912, 1.4912, 1.4913, 1.4913, 1.4913,
   1.4914, 1.4914, 1.4915, 1.4915, 1.4916, 1.4916, 1.4917, 1.4917, 1.4918, 1.4918,
   1.4919, 1.4919, 1.4920, 1.4920, 1.4921, 1.4921, 1.4922, 1.4922, 1.4923, 1.4923,
   1.4924, 1.4924, 1.4925, 1.4926, 1.4926, 1.4927, 1.4927, 1.4928, 1.4928, 1.4929,
   1.4929, 1.4930, 1.4931, 1.4931, 1.4932, 1.4932, 1.4933, 1.4933, 1.4934, 1.4935,
   1.4935, 1.4936, 1.4936, 1.4937, 1.4938, 1.4938, 1.4939, 1.4940, 1.4940, 1.4941,
   1.4941, 1.4942, 1.4943, 1.4943, 1.4944, 1.4945, 1.4945, 1.4946, 1.4947, 1.4947,
   1.4948, 1.4949, 1.4949, 1.4950, 1.4951, 1.4951, 1.4952, 1.4953, 1.4954, 1.4954,
   1.4955, 1.4956, 1.4956, 1.4957, 1.4958, 1.4959, 1.4959, 1.4960, 1.4961, 1.4962,
   1.4962, 1.4963, 1.4964, 1.4965, 1.4965, 1.4966, 1.4967, 1.4968, 1.4969, 1.4970,
   1.4970, 1.4971, 1.4972, 1.4973, 1.4974, 1.4974, 1.4975, 1.4976, 1.4977, 1.4978,
   1.4979, 1.4980, 1.4980, 1.4981, 1.4982, 1.4983, 1.4984, 1.4985, 1.4986, 1.4987,
   1.4988, 1.4989, 1.4990, 1.4991, 1.4992, 1.4993, 1.4994, 1.4995, 1.4996, 1.4997,
   1.4997, 1.4998, 1.5000, 1.5001, 1.5002, 1.5003, 1.5004, 1.5005, 1.5006, 1.5007,
   1.5008, 1.5009, 1.5010, 1.5011, 1.5012, 1.5013, 1.5015, 1.5016, 1.5017, 1.5018,
   1.5019, 1.5020, 1.5022, 1.5023, 1.5024, 1.5025, 1.5026, 1.5028, 1.5029, 1.5030,
   1.5031, 1.5033, 1.5034, 1.5035, 1.5036, 1.5038, 1.5039, 1.5040, 1.5042, 1.5043,
   1.5044, 1.5046, 1.5047, 1.5049, 1.5050, 1.5051, 1.5053, 1.5054, 1.5056, 1.5057,
   1.5059, 1.5060, 1.5062, 1.5063, 1.5065, 1.5066, 1.5068, 1.5069, 1.5071, 1.5073,
   1.5074, 1.5076, 1.5077, 1.5079, 1.5081, 1.5082, 1.5084, 1.5086, 1.5088, 1.5089,
   1.5091, 1.5093, 1.5095, 1.5096, 1.5098, 1.5100, 1.5102, 1.5104, 1.5106, 1.5108,
   1.5109, 1.5111, 1.5113, 1.5115, 1.5117, 1.5119, 1.5121, 1.5123, 1.5125, 1.5127,
   1.5130, 1.5132, 1.5134, 1.5136, 1.5138, 1.5141, 1.5143, 1.5145, 1.5147, 1.5149,
   1.5152, 1.5154, 1.5157, 1.5159, 1.5161, 1.5164, 1.5166, 1.5169, 1.5171, 1.5174,
   1.5176, 1.5179, 1.5181, 1.5184, 1.5187, 1.5190, 1.5192, 1.5195, 1.5198, 1.5201,
   1.5203, 1.5206, 1.5209, 1.5212, 1.5215, 1.5218, 1.5221, 1.5224, 1.5227, 1.5230,
   1.5234, 1.5237, 1.5240, 1.5243, 1.5247, 1.5250, 1.5254, 1.5257, 1.5260, 1.5264,
   1.5267, 1.5271, 1.5275, 1.5279, 1.5282, 1.5286, 1.5290, 1.5294, 1.5297, 1.5302,
   1.5306, 1.5310, 1.5314, 1.5318, 1.5322, 1.5326};

G4double ABSORPTION_skAcrylic[306] =
  {3472.22*m, 3355.70*m, 3300.33*m, 3412.97*m, 3496.50*m, 3649.64*m, 3861.00*m, 3921.57*m, 3846.15*m, 3703.70*m,
   3448.28*m, 3048.78*m, 2932.55*m, 2770.08*m, 2808.99*m, 2906.98*m, 2898.55*m, 2906.98*m, 3003.00*m, 3164.56*m,
   3184.71*m, 3246.75*m, 3086.42*m, 2994.01*m, 2994.01*m, 2967.36*m, 3030.30*m, 3039.51*m, 3105.59*m, 2958.58*m,
   3012.05*m, 3039.51*m, 2967.36*m, 2932.55*m, 2923.98*m, 2890.17*m, 2857.14*m, 2865.33*m, 2915.45*m, 2898.55*m,
   2881.84*m, 2754.82*m, 2702.70*m, 2754.82*m, 2890.17*m, 2840.91*m, 2659.57*m, 2604.17*m, 2624.67*m, 2857.14*m,
   2849.00*m, 2849.00*m, 2610.97*m, 2597.40*m, 2688.17*m, 2590.67*m, 2439.02*m, 2380.95*m, 2398.08*m, 2320.19*m,
   2369.67*m, 2293.58*m, 2267.57*m, 2262.44*m, 2320.19*m, 2309.47*m, 2237.14*m, 2247.19*m, 2257.34*m, 2336.45*m,
   2347.42*m, 2421.31*m, 2439.02*m, 2392.34*m, 2392.34*m, 2500.00*m, 2500.00*m, 2512.56*m, 2481.39*m, 2444.99*m,
   2155.17*m, 2053.39*m, 2008.03*m, 2040.82*m, 1988.07*m, 2004.01*m, 1976.28*m, 1834.86*m, 1798.56*m, 1869.16*m,
   1808.32*m, 1754.39*m, 1805.05*m, 1841.62*m, 1872.66*m, 1964.64*m, 1976.28*m, 1893.94*m, 1890.36*m, 1908.40*m,
   1897.53*m, 1855.29*m, 1886.79*m, 1904.76*m, 1841.62*m, 1855.29*m, 1834.86*m, 1805.05*m, 1733.10*m, 1779.36*m,
   1754.39*m, 1788.91*m, 1831.50*m, 1834.86*m, 1869.16*m, 1912.05*m, 2004.01*m, 1968.50*m, 1915.71*m, 1818.18*m,
   1795.33*m, 1766.78*m, 1808.32*m, 1766.78*m, 1754.39*m, 1751.31*m, 1776.20*m, 1838.24*m, 1872.66*m, 1919.39*m,
   1901.14*m, 1988.07*m, 1926.78*m, 1893.94*m, 1901.14*m, 1851.85*m, 1818.18*m, 1769.91*m, 1727.12*m, 1724.14*m,
   1709.40*m, 1689.19*m, 1692.05*m, 1680.67*m, 1697.79*m, 1727.12*m, 1763.67*m, 1697.79*m, 1692.05*m, 1666.67*m,
   1600.00*m, 1636.66*m, 1615.51*m, 1610.31*m, 1538.46*m, 1501.50*m, 1519.76*m, 1492.54*m, 1515.15*m, 1457.73*m,
   1479.29*m, 1461.99*m, 1470.59*m, 1470.59*m, 1453.49*m, 1512.86*m, 1522.07*m, 1589.83*m, 1577.29*m, 1597.44*m,
   1600.00*m, 1672.24*m, 1663.89*m, 1647.45*m, 1661.13*m, 1607.72*m, 1543.21*m, 1488.10*m, 1459.85*m, 1373.63*m,
   1326.26*m, 1373.63*m, 1410.44*m, 1406.47*m, 1396.65*m, 1308.90*m, 1328.02*m, 1386.96*m, 1347.71*m, 1297.02*m,
   1262.63*m, 1234.57*m, 1283.70*m, 1319.26*m, 1310.62*m, 1319.26*m, 1402.52*m, 1459.85*m, 1464.13*m, 1472.75*m,
   1420.45*m, 1432.66*m, 1400.56*m, 1362.40*m, 1358.70*m, 1358.70*m, 1379.31*m, 1360.54*m, 1362.40*m, 1355.01*m,
   1342.28*m, 1367.99*m, 1293.66*m, 1221.00*m, 1197.60*m, 1165.50*m, 1119.82*m, 1107.42*m, 1108.65*m, 1040.58*m,
   1033.06*m, 1000.00*m, 952.38*m, 925.93*m, 909.09*m, 869.57*m, 800.00*m, 781.25*m, 769.23*m, 729.93*m, 735.29*m,
   729.93*m, 709.22*m, 684.93*m, 657.89*m, 645.16*m, 625.00*m, 581.40*m, 568.18*m, 558.66*m, 543.48*m, 540.54*m,
   523.56*m, 505.05*m, 490.20*m, 485.44*m, 462.96*m, 450.45*m, 442.48*m, 429.18*m, 420.17*m, 411.52*m, 411.52*m,
   393.70*m, 393.70*m, 386.10*m, 381.68*m, 355.87*m, 343.64*m, 331.13*m, 343.64*m, 338.98*m, 335.57*m, 326.80*m,
   313.48*m, 303.95*m, 294.12*m, 292.40*m, 280.90*m, 273.97*m, 270.27*m, 265.25*m, 261.78*m, 256.41*m, 250.00*m,
   242.13*m, 237.53*m, 233.10*m, 228.83*m, 226.76*m, 223.21*m, 219.30*m, 215.05*m, 211.86*m, 208.77*m, 206.61*m,
   201.21*m, 196.85*m, 193.42*m, 189.75*m, 186.22*m, 182.15*m, 175.75*m, 168.92*m, 162.60*m, 154.80*m, 144.51*m,
   133.51*m, 120.19*m, 105.93*m, 90.91*m, 75.76*m, 61.35*m, 48.54*m, 37.88*m, 29.41*m};

G4double RINDEX1[NUMENTRIES_water] =
  {1.32885, 1.32906, 1.32927, 1.32948, 1.3297, 1.32992, 1.33014,
   1.33037, 1.3306, 1.33084, 1.33109, 1.33134, 1.3316, 1.33186, 1.33213,
   1.33241, 1.3327, 1.33299, 1.33329, 1.33361, 1.33393, 1.33427, 1.33462,
   1.33498, 1.33536, 1.33576, 1.33617, 1.3366, 1.33705, 1.33753, 1.33803,
   1.33855, 1.33911, 1.3397, 1.34033, 1.341, 1.34172, 1.34248, 1.34331,
   1.34419, 1.34515, 1.3462, 1.34733, 1.34858, 1.34994, 1.35145, 1.35312,
   1.35498, 1.35707, 1.35943, 1.36211, 1.36518, 1.36872, 1.37287, 1.37776,
   1.38362, 1.39074, 1.39956, 1.41075, 1.42535};
 G4double ABWFF = 1.30;

G4double ABSORPTION_water[NUMENTRIES_water] =
  {
    16.1419*cm*ABWFF,  18.278*cm*ABWFF, 21.0657*cm*ABWFF, 24.8568*cm*ABWFF, 30.3117*cm*ABWFF,
    38.8341*cm*ABWFF, 54.0231*cm*ABWFF, 81.2306*cm*ABWFF, 120.909*cm*ABWFF, 160.238*cm*ABWFF,
    193.771*cm*ABWFF, 215.017*cm*ABWFF, 227.747*cm*ABWFF,  243.85*cm*ABWFF, 294.036*cm*ABWFF,
    321.647*cm*ABWFF,  342.81*cm*ABWFF, 362.827*cm*ABWFF, 378.041*cm*ABWFF, 449.378*cm*ABWFF,
    739.434*cm*ABWFF, 1114.23*cm*ABWFF, 1435.56*cm*ABWFF, 1611.06*cm*ABWFF, 1764.18*cm*ABWFF,
    2100.95*cm*ABWFF,  2292.9*cm*ABWFF, 2431.33*cm*ABWFF,  3053.6*cm*ABWFF, 4838.23*cm*ABWFF,
    6539.65*cm*ABWFF, 7682.63*cm*ABWFF, 9137.28*cm*ABWFF, 12220.9*cm*ABWFF, 15270.7*cm*ABWFF,
    19051.5*cm*ABWFF, 23671.3*cm*ABWFF, 29191.1*cm*ABWFF, 35567.9*cm*ABWFF,   42583*cm*ABWFF,
    49779.6*cm*ABWFF, 56465.3*cm*ABWFF,   61830*cm*ABWFF, 65174.6*cm*ABWFF, 66143.7*cm*ABWFF,
    64820*cm*ABWFF,   61635*cm*ABWFF, 57176.2*cm*ABWFF, 52012.1*cm*ABWFF, 46595.7*cm*ABWFF,
    41242.1*cm*ABWFF, 36146.3*cm*ABWFF, 31415.4*cm*ABWFF, 27097.8*cm*ABWFF, 23205.7*cm*ABWFF,
    19730.3*cm*ABWFF, 16651.6*cm*ABWFF, 13943.6*cm*ABWFF, 11578.1*cm*ABWFF, 9526.13*cm*ABWFF
  };

G4double Matrix_ref[NUMENTRIES_water] =
  { .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0,
    .0, .0, .0, .0, .0, .0};



 G4MaterialPropertiesTable *AcrPropTable = new G4MaterialPropertiesTable();
 AcrPropTable->AddProperty("RINDEX", ENERGY_skAcrylic, RINDEX_skAcrylic, 306);
 AcrPropTable->AddProperty("ABSLENGTH", ENERGY_skAcrylic, ABSORPTION_skAcrylic, 306);
 Acrylic->SetMaterialPropertiesTable(AcrPropTable);

 G4MaterialPropertiesTable *myMPT1 = new G4MaterialPropertiesTable();
 myMPT1->AddProperty("RINDEX", ENERGY_water, RINDEX1, NUMENTRIES_water);
 myMPT1->AddProperty("ABSLENGTH",ENERGY_water, ABSORPTION_water, NUMENTRIES_water);
 myMPT1->AddProperty("RAYLEIGH",ENERGY_water,RAYLEIGH_water,NUMENTRIES_water);
 Water->SetMaterialPropertiesTable(myMPT1);
  
 G4MaterialPropertiesTable *SilGelPropTable = new G4MaterialPropertiesTable();
 SilGelPropTable->AddProperty("RINDEX", ENERGY_water, RINDEX_SilGel, NUMENTRIES_water);
 SilGelPropTable->AddProperty("ABSLENGTH",ENERGY_SilGel, ABSORPTION_SilGel, 18); //ToDo: get measurement of optical properties of the optical gel. From slides: better than 40cm above 350nm.                                                          
 SilGelPropTable->AddProperty("RAYLEIGH",ENERGY_water,RAYLEIGH_water,NUMENTRIES_water); //ToDo: get actual Rayleigh scattering in gel                                                                                                                
 SilGel->SetMaterialPropertiesTable(SilGelPropTable);
 
 G4MaterialPropertiesTable *myST1 = new G4MaterialPropertiesTable();
 myST1->AddProperty("RINDEX", ENERGY_water, RINDEX_blacksheet, NUMENTRIES_water);
 myST1->AddProperty("SPECULARLOBECONSTANT", PP, SPECULARLOBECONSTANT, NUM);
 myST1->AddProperty("SPECULARSPIKECONSTANT", PP, SPECULARSPIKECONSTANT, NUM);
 myST1->AddProperty("BACKSCATTERCONSTANT", PP, BACKSCATTERCONSTANT, NUM);
 myST1->AddProperty("REFLECTIVITY", ENERGY_water, REFLECTIVITY_blacksheet, NUMENTRIES_water);
 myST1->AddProperty("EFFICIENCY", ENERGY_water, EFFICIENCY_blacksheet, NUMENTRIES_water);
  
 G4OpticalSurface* OpGelFoamSurface = new G4OpticalSurface("GelFoamSurface");
 
 OpGelFoamSurface->SetType(dielectric_dielectric);
 OpGelFoamSurface->SetModel(unified);
 OpGelFoamSurface->SetFinish(groundfrontpainted);
 OpGelFoamSurface->SetSigmaAlpha(0.1);
  
 OpGelFoamSurface->SetMaterialPropertiesTable(myST1);
 
 
 G4OpticalSurface*  ReflectorSkinSurface = new G4OpticalSurface("ReflectorSurface");
 ReflectorSkinSurface->SetType(dielectric_metal);
 ReflectorSkinSurface->SetModel(unified);
 ReflectorSkinSurface->SetFinish(polished);

 
 G4MaterialPropertiesTable *ref = new G4MaterialPropertiesTable();
 ref->AddProperty("REFLECTIVITY", ENERGY_ref, REFLECTIVITY_ref, NUMENTRIES_ref);
 ReflectorSkinSurface->SetMaterialPropertiesTable(ref);
 Aluminum->SetMaterialPropertiesTable(ref);


 G4MaterialPropertiesTable *myMPT3 = new G4MaterialPropertiesTable();
 myMPT3->AddProperty("ABSLENGTH", ENERGY_water, Matrix_ref, NUMENTRIES_water);
 // myMPT3->AddProperty("REFLECTIVITY", ENERGY_water, REFLECTIVITY_blacksheet, NUMENTRIES_water);
 myMPT3->AddProperty("EFFICIENCY",   ENERGY_water, EFFICIENCY, NUMENTRIES_water);
 Plastic->SetMaterialPropertiesTable(myMPT3);

 G4OpticalSurface*  PlasticSkinSurface = new G4OpticalSurface("PlasticSurface");
 PlasticSkinSurface->SetType(dielectric_metal);
 PlasticSkinSurface->SetModel(unified);
 PlasticSkinSurface->SetFinish(polished);

 G4MaterialPropertiesTable *plasticMaterial = new G4MaterialPropertiesTable();
 plasticMaterial->AddProperty("REFLECTIVITY", ENERGY_water, REFLECTIVITY_blacksheet, NUMENTRIES_water);
 PlasticSkinSurface->SetMaterialPropertiesTable(plasticMaterial);

 ///////////////////construct geometry/////////////////////
 
  //  WCSimTuningParameters* tuningpars = new WCSimTuningParameters();
  //  enum DetConfiguration {wfm =1, fwm=2};
  //  G4int WCSimConfiguration = fwm;
 
  //  myDetectorConstruction myDetector(WCSimConfiguration, tuningpars);
  //  G4LogicalVolume* logicPMT = detectorConstruction->ConstructPMT();

  //  G4LogicalVolume* logicWorld = myDetector.ConstructPMT();
  
  G4Box *solidmPMT = new G4Box("solidmPMT", 0.5*m, 0.5*m, .5*m);
  
  logicmPMT = new G4LogicalVolume(solidmPMT,
				  //Air,
				  Water,                                                             
				  "logicmPMT");


  physWorld = new G4PVPlacement(0,
				G4ThreeVector(0.,0.,0.),
				logicmPMT,
				"physWorld",
				0,
				false,
				0,
				true);


  //////////////////////////////Matrix////////////////////////////////////////////  

  G4Sphere *matrixSolid = new G4Sphere("MatrixSolid",
				       264.24*mm,
				       270.24*mm,
				       0.0*deg, 360.0*deg,
				       0.0, 44.336*deg);
  

  G4LogicalVolume *matrixLogic = new G4LogicalVolume(matrixSolid,
						     Plastic,
						     "matrixLogic");

  G4LogicalSkinSurface* matrixSurfaceProperties = new G4LogicalSkinSurface("matrixSkinSurface", matrixLogic, PlasticSkinSurface);
   
  G4VPhysicalVolume *physMatrix = new G4PVPlacement(0,
						    G4ThreeVector(0.,0.,-299.*mm),
						    //G4ThreeVector(0.,0.,-288.5*mm),
						    matrixLogic,
						    "physMatrix",
						    logicmPMT,
						    false,
						    0,
						    true);  
  
  
  G4Tubs *flangeSolid = new G4Tubs("flangeSolid",
				   185.*mm,
				   223.*mm,
				   3.*mm,
				   0.*deg, 360.*deg);

  G4LogicalVolume *flangeLogic = new G4LogicalVolume(flangeSolid,
						     Plastic,
                                                     "flangeLogic");
  
  G4LogicalSkinSurface* flangeSurfaceProperties = new G4LogicalSkinSurface("flangeSkinSurface", flangeLogic, PlasticSkinSurface);

  
  G4VPhysicalVolume *physFlange = new G4PVPlacement(0,
                                                   G4ThreeVector(0.,0.,-112.85*mm),
                                                   flangeLogic,
                                                   "physFlange",
                                                   logicmPMT,
                                                   false,
                                                   0,
                                                   true);
  
  //////////////////////////cylinder//////////////////////////////////////

  G4Tubs *cylinderSolid = new G4Tubs("cylinderSolid",
				     227.1*mm,
				     254.*mm,
				     77.785*mm,
				     0.*deg, 360.*deg);

  G4LogicalVolume *cylinderLogic = new G4LogicalVolume(cylinderSolid,
						       Plastic,
						       "flangeLogic");
  
  G4LogicalSkinSurface* cylinderSurfaceProperties = new G4LogicalSkinSurface("cylinderSkinSurface", cylinderLogic, PlasticSkinSurface);

  
  G4VPhysicalVolume *physCylinder = new G4PVPlacement(0,
						    G4ThreeVector(0.,0.,-120.385*mm),
						    cylinderLogic,
						    "physCylinder",
						    logicmPMT,
						    false,
						    0,
						    true);
  
  G4VisAttributes *cylinderAttributes = new G4VisAttributes();  
  cylinderAttributes->SetColor(0.2, 0.2, 0.2, 1.0);  
  cylinderAttributes->SetVisibility(true); 
  cylinderAttributes->SetForceSolid(true);  
  cylinderLogic->SetVisAttributes(cylinderAttributes);
  
  
  /////////////////////////PMT Object//////////////////////////////////////
  
  
  
  G4int numPMTs = 19;
  
  G4double xArray[19] ={0.*mm, 84.43*mm, 42.21*mm, -42.21*mm, -84.43*mm, -42.21*mm, 42.21*mm, 155.109*mm, 134.32*mm, 77.55*mm, 0.*mm, -77.55*mm, -134.32*mm, -155.109*mm, -134.32*mm, -77.55*mm, 0.*mm, 77.55*mm, 134.32*mm};

  G4double yArray[19] = {0.*mm, 0.*mm, -73.125*mm, -73.125*mm, 0.*mm, 73.125*mm, 73.125*mm, 0.*mm, -77.55*mm, -134.32*mm, -155.109*mm, -134.32*mm, -77.55*mm, 0.*mm, 77.55*mm, 134.32*mm, 155.109*mm, 134.32*mm, 77.55*mm};

  G4double zArray[19] = {0.*mm, -13.91*mm, -13.91*mm, -13.91*mm, -13.91*mm, -13.91*mm, -13.91*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm, -50.88*mm};

  G4double zdomeArray[19] = {277.6*mm, 263.71*mm, 263.71*mm, 263.71*mm, 263.71*mm, 263.71*mm, 263.71*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm, 227.36*mm};

  G4double xthetaArray[19] = {0.*deg, 0.*deg, 16.24*deg, 16.24*deg, 0.*deg, -16.24*deg, -16.24*deg, 0.*deg, 19.861*deg, 32.03*deg, 35.846*deg, 32.03*deg, 19.861*deg, 0.*deg, -19.861*deg, -32.03*deg, -35.846*deg, -32.03*deg, -19.861*deg};

  G4double ythetaArray[19] = {0.*deg, 18.59*deg, 9.54*deg, -9.54*deg, -18.59*deg, -9.54*deg, 9.54*deg, 35.84*deg, 32.03*deg, 19.861*deg, 0.*deg, -19.861*deg, -32.03*deg, -35.846*deg, -32.03*deg, -19.861*deg, 0.*deg, 19.861*deg, 32.03*deg};

  G4double phiArray[19] = {0.*deg, 0.*deg, -60.*deg, -120.*deg, 180.*deg, 120.*deg, 60*deg, 0.*deg, -30.*deg, -60.*deg, -90.*deg, -120.*deg, -150.*deg, 180.*deg, 150.*deg, 120.*deg, 90.*deg, 60.*deg, 30.*deg};

  G4double thetaArray[19] =  {0.*deg, 18.59*deg, 18.59*deg, 18.59*deg, 18.59*deg, 18.59*deg, 18.59*deg,
                              35.84*deg, 35.84*deg, 35.84*deg, 35.84*deg, 35.84*deg, 35.84*deg, 
                              35.84*deg, 35.84*deg, 35.84*deg, 35.84*deg, 35.84*deg, 35.84*deg, };

  double distanceToCenter = (332-54.373)*mm;
  //double distanceToCenter = (332-54.4)*mm;

  for (int i = 0; i < numPMTs; i++) {

    G4ThreeVector PMTPosition = {0,0,0};
    PMTPosition.setRThetaPhi(distanceToCenter,thetaArray[i],phiArray[i]);  
    PMTPosition.setZ(PMTPosition.getZ()-distanceToCenter+0.027*mm);

    G4RotationMatrix* PMTRotation = new G4RotationMatrix;
    PMTRotation->rotateZ(-phiArray[i]);
    PMTRotation->rotateY(-thetaArray[i]);

    G4double x = xArray[i];
    G4double y = yArray[i];
    G4double z = zArray[i];

    G4double xtheta = xthetaArray[i];
    G4double ytheta = ythetaArray[i];
    G4double phi = phiArray[i];

    std::stringstream ss;
    ss << "PMTCopy" << i;
    std::string pmtName = ss.str();

    G4RotationMatrix* rot = new G4RotationMatrix();
    rot->rotateX(-xtheta);
    rot->rotateY(-ytheta);
    rot->rotateZ(phi);

    G4ThreeVector translation(x,y,z);

    
    // Create and place the PMT copy                                                                                    
    G4VPhysicalVolume *pmtCopy = new G4PVPlacement(PMTRotation,//rot,
						   //G4ThreeVector(x, y, z),
						   PMTPosition,//translation,
						   logicPMT,
						   pmtName.c_str(),
						   logicmPMT,
						   false,
						   i,
  						   true);
    
  }
  
  ///////////////////////Dome///////////////////////////                                                                     
  G4double domeInnerRadius = 332.*mm;
  G4double domeOuterRadius = 347.*mm;

  G4Sphere *domeSphere = new G4Sphere("DomeSphere",
				      domeInnerRadius,
				      domeOuterRadius,
				      0.0*deg, 360.0*deg,
				      0.0, 90.*deg);

  G4Box *solidBoxCutOut = new G4Box("BoxCutOut",
				    domeOuterRadius+1.*cm,
				    domeOuterRadius+1.*cm,
				    235*mm);

  G4VSolid *domeSolid = new G4SubtractionSolid("domeSolid",
                                               domeSphere,
                                               solidBoxCutOut);

  G4VSolid* newDomeSubtraction = domeSolid;

  G4Transform3D* transform = new G4Transform3D[numPMTs];

  for(G4int i = 0; i < numPMTs; ++i)
    {
      transform[i] = G4Translate3D(xArray[i], yArray[i], zdomeArray[i]) * G4RotateX3D(xthetaArray[i]) * G4RotateY3D(ythetaArray[i]) * G4RotateZ3D(phiArray[i]);
      
    }

  for(G4int i = 0; i < numPMTs; ++i)
    {
      std::stringstream ss;
      ss << i;
      std::string index_str = ss.str();

      newDomeSubtraction = new G4SubtractionSolid("subtraction_" + index_str,
						  newDomeSubtraction,
						  //PMTSolid,                 
						  logicPMT->GetSolid(),
						  transform[i]);
     
    }


  G4LogicalVolume *domeLogic = new G4LogicalVolume(//newDomeSubtraction,
						   domeSolid,
                                                   Acrylic,
                                                   "DomeLogic");

  
  G4VPhysicalVolume *physDome = new G4PVPlacement(0,
                                                  G4ThreeVector(0.,0.,-277.6*mm),
                                                  //G4ThreeVector(0.,0.,-274.4*mm),
                                                  domeLogic,
                                                  "physDome",
                                                  logicmPMT,
                                                  false,
                                                  0,
                                                  true);
  
  G4VisAttributes *domeAttributes = new G4VisAttributes();
  domeAttributes->SetColor(1.0, 1.0, 1.0, 0.5);
  domeAttributes->SetVisibility(true);
  domeAttributes->SetForceSolid(true);
  domeLogic->SetVisAttributes(domeAttributes);

  
  /*
  G4VPhysicalVolume *physPMT = new G4PVPlacement(0,
						 G4ThreeVector(0.,0.,0.*mm),
						 logicPMT,
						 "physPMT",
						 //logicmPMT,
						 0,
						 false,
						 0,
						 true);  
  */						 
   ///////////////////////////Extra////////////////////////////////////////////////

  G4RunManager::GetRunManager()->DefineWorldVolume(physWorld);
  //  return physPMT;
  return physWorld;

}



