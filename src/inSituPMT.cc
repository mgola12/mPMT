/*                                                                             
Author:    Mohit Gola 22nd February 2024                                                
*/

#include "inSituPMT.hh"
#include "G4UserLimits.hh"
#include "G4AssemblyVolume.hh"
#include "G4VPhysicalVolume.hh"

inSituPMTConstruction::inSituPMTConstruction(G4int DetConfig, WCSimTuningParameters* WCSimTuningPars) : WCSimTuningParams(WCSimTuningPars)
{
  myConfiguration = DetConfig;
}

inSituPMTConstruction::~inSituPMTConstruction()
{}

G4LogicalVolume *inSituPMTConstruction::ConstructioninSituPMT()

{
  G4NistManager *nist = G4NistManager::Instance();
  G4Material *Air = nist->FindOrBuildMaterial("G4_AIR");

  const G4int numEntries = 2;
  const G4int NUMENTRIES_water = 60;
  G4double absorptionCoeff = 1.0e6 / cm;
  G4double photonEnergy[numEntries] = {1.*eV, 10.*eV};
  G4double absorption[numEntries] = {absorptionCoeff, absorptionCoeff};
  G4double rindexWorld[numEntries] = {1.0, 1.0};


  G4double ENERGY_water[NUMENTRIES_water] =
    { 1.56962*eV, 1.58974*eV, 1.61039*eV, 1.63157*eV,
      1.65333*eV, 1.67567*eV, 1.69863*eV, 1.72222*eV,
      1.74647*eV, 1.77142*eV, 1.7971*eV, 1.82352*eV,
      1.85074*eV, 1.87878*eV, 1.90769*eV, 1.93749*eV,
      1.96825*eV, 1.99999*eV, 2.03278*eV, 2.06666*eV,
      2.10169*eV, 2.13793*eV, 2.17543*eV, 2.21428*eV,
      2.25454*eV, 2.29629*eV, 2.33962*eV, 2.38461*eV,
      2.43137*eV, 2.47999*eV, 2.53061*eV, 2.58333*eV,
      2.63829*eV, 2.69565*eV, 2.75555*eV, 2.81817*eV,
      2.88371*eV, 2.95237*eV, 3.02438*eV, 3.09999*eV,
      3.17948*eV, 3.26315*eV, 3.35134*eV, 3.44444*eV,
      3.54285*eV, 3.64705*eV, 3.75757*eV, 3.87499*eV,
      3.99999*eV, 4.13332*eV, 4.27585*eV, 4.42856*eV,
      4.59258*eV, 4.76922*eV, 4.95999*eV, 5.16665*eV,
      5.39129*eV, 5.63635*eV, 5.90475*eV, 6.19998*eV };


  G4double RINDEX_air[NUMENTRIES_water] =
    { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
  


  G4double ENERGY_glass[45]={4.95937*eV, 4.76862*eV, 4.59201*eV, 4.42801*eV, 4.27532*eV,
			     4.13281*eV, 3.99949*eV, 3.87451*eV, 3.7571*eV, 3.64659*eV,
			     3.54241*eV, 3.44401*eV, 3.35092*eV, 3.26274*eV, 3.17908*eV,
			     3.0996*eV, 3.024*eV, 2.952*eV, 2.88335*eV, 2.81782*eV,
			     2.7552*eV, 2.69531*eV, 2.63796*eV, 2.583*eV, 2.53029*eV,
			     2.47968*eV, 2.43106*eV, 2.38431*eV, 2.33932*eV, 2.296*eV,
			     2.25426*eV, 2.214*eV, 2.17516*eV, 2.13766*eV, 2.10143*eV,
			     2.0664*eV, 2.03253*eV, 1.99975*eV, 1.968*eV, 1.93725*eV,
			     1.90745*eV, 1.87855*eV, 1.85051*eV, 1.8233*eV,  1.79687*eV };


  G4double RINDEX_glass2[45]={1.578110, 1.571475, 1.565786, 1.560859, 1.556556,
			      1.552770, 1.549417, 1.546429, 1.543752, 1.541344,
			      1.539166, 1.537190, 1.535390, 1.533745, 1.532236,
			      1.530849, 1.529569, 1.528385, 1.527288, 1.526269,
			      1.525320, 1.524433, 1.523605, 1.522829, 1.522100,
			      1.521414, 1.520769, 1.520160, 1.519584, 1.519039,
			      1.518522, 1.518032, 1.517566, 1.517122, 1.516699,
			      1.516295, 1.515909, 1.515539, 1.515186, 1.514846,
			      1.514520, 1.514207, 1.513905, 1.513615, 1.513335};


  G4double ABSORPTION_glass2[45]={0.000574415*m, 0.000854808*m, 0.00134354*m, 0.00226156*m, 0.00414292*m,
                                  0.00834524*m, 0.0180342*m, 0.0382308*m, 0.0785805*m, 0.143885*m,
                                  0.299827*m, 0.629713*m, 1.07439*m, 1.45803*m, 2.26023*m,
                                  3.11245*m, 3.75419*m, 3.55892*m, 3.2194*m, 3.11393*m,
                                  3.30197*m, 3.55878*m, 3.6993*m, 3.77316*m, 3.88867*m,
                                  4.15414*m, 4.63536*m, 5.22806*m, 5.78547*m, 6.16079*m,
                                  6.21063*m, 5.92339*m, 5.45867*m, 4.98751*m, 4.64493*m,
                                  4.42188*m, 4.27329*m, 4.15408*m, 4.03614*m, 3.95912*m,
                                  3.97959*m, 4.15417*m, 4.51931*m, 5.031*m, 5.31356*m};

  G4double ABSORBER_ref[NUMENTRIES_water] =
    { .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0,
      .0, .0, .0, .0, .0, .0};

  G4double ENERGY_SilGel[87] = {4.678776674*eV, 4.592027283*eV, 4.508478709*eV, 4.427958491*eV, 4.35030587*eV,
                                4.275369924*eV, 4.202452758*eV, 4.13256199*eV, 4.064996939*eV, 3.999137915*eV,
                                3.935906953*eV, 3.87420652*eV, 3.814907862*eV, 3.756987416*eV, 3.700835849*eV,
                                3.646372728*eV, 3.593524966*eV, 3.542221472*eV, 3.492396167*eV, 3.443986692*eV,
                                3.396571472*eV, 3.350829881*eV, 3.305993162*eV, 3.262706518*eV, 3.220245191*eV,
                                3.178906699*eV, 3.138646881*eV, 3.099424803*eV, 3.061201121*eV, 3.023938677*eV,
                                2.987602577*eV, 2.95188653*eV, 2.917309072*eV, 2.883302061*eV, 2.850107745*eV,
                                2.817696981*eV, 2.786043724*eV, 2.7551212*eV, 2.72490498*eV, 2.695146764*eV,
                                2.666278206*eV, 2.637833975*eV, 2.610016557*eV, 2.583011752*eV, 2.556384369*eV,
                                2.53013002*eV, 2.504627471*eV, 2.479660085*eV, 2.455025471*eV, 2.430901116*eV,
                                2.407447973*eV, 2.384294297*eV, 2.361606176*eV, 2.339203259*eV, 2.317409616*eV,
                                2.295881811*eV, 2.274931174*eV, 2.254228848*eV, 2.233923745*eV, 2.213856184*eV,
                                2.194315186*eV, 2.175138494*eV, 2.156177117*eV, 2.137566187*eV, 2.119296781*eV,
                                2.10135941*eV, 2.083745787*eV, 2.06631904*eV, 2.049203275*eV, 2.032514943*eV,
                                2.01587474*eV, 1.999646316*eV, 1.983698791*eV, 1.967909817*eV, 1.952391965*eV,
                                1.937138174*eV, 1.92214235*eV, 1.90739769*eV, 1.892792856*eV, 1.878535228*eV,
                                1.864408987*eV, 1.850413879*eV, 1.836747218*eV, 1.823203874*eV, 1.809879596*eV,
                                1.796768999*eV, 1.783867346*eV};

  G4double ABSORPTION_SilGel[87] = {0.038149438*m, 0.042804385*m, 0.052016858*m, 0.065315823*m, 0.082271384*m,
                                    0.102492373*m, 0.125624001*m, 0.151345579*m, 0.179368306*m, 0.209433124*m,
                                    0.241308636*m, 0.274789092*m, 0.309692442*m, 0.345858458*m, 0.383146918*m,
                                    0.421435858*m, 0.460619889*m, 0.500608586*m, 0.541324938*m, 0.582703865*m,
                                    0.624690804*m, 0.667240357*m, 0.710315014*m, 0.753883932*m, 0.797921786*m,
                                    0.842407687*m, 0.887324167*m, 0.932656224*m, 0.978390441*m, 1.024514168*m,
                                    1.071014774*m, 1.117878956*m, 1.165092126*m, 1.212637859*m, 1.260497406*m,
                                    1.308649275*m, 1.357068882*m, 1.405728262*m, 1.45459585*m, 1.503636328*m,
                                    1.552810543*m, 1.602075479*m, 1.65138431*m, 1.700686509*m, 1.74992803*m,
                                    1.799051552*m, 1.847996793*m, 1.896700886*m, 1.945098826*m, 1.993123983*m,
                                    2.040708675*m, 2.08778482*m, 2.134284638*m, 2.180141438*m, 2.225290453*m,
                                    2.269669756*m, 2.313221236*m, 2.355891637*m, 2.397633674*m, 2.438407204*m,
                                    2.478180472*m, 2.516931417*m, 2.55464905*m, 2.591334893*m, 2.627004493*m,
                                    2.661688988*m, 2.695436756*m, 2.72831512*m, 2.760412122*m, 2.791838362*m,
                                    2.822728908*m, 2.853245269*m, 2.883577433*m, 2.913945973*m, 2.944604226*m,
                                    2.975840522*m, 3.0079805*m, 3.041389473*m, 3.076474872*m, 3.113688745*m,
                                    3.153530334*m, 3.196548711*m, 3.243345483*m, 3.29457756*m, 3.350959998*m,
                                    3.413268897*m, 3.482344375*m};

  G4double RINDEX_SilGel[88] = {1.608013009, 1.591127095, 1.575602811, 1.561337877, 1.548237552,
                                1.536214093, 1.52518625, 1.515078789, 1.505822046, 1.497351509,
                                1.489607425, 1.482534437, 1.476081242, 1.470200274, 1.464847411,
                                1.459981699, 1.455565103, 1.451562271, 1.447940318, 1.444668631,
                                1.441718687, 1.439063886, 1.436679401, 1.434542037, 1.432630111,
                                1.430923337, 1.429402722, 1.428050477, 1.426849937, 1.425785482,
                                1.424842478, 1.424007219, 1.423266872, 1.422609439, 1.422023711,
                                1.42149924, 1.421026309, 1.420595902, 1.420199685, 1.419829987,
                                1.419479779, 1.419142664, 1.418812857, 1.41848518, 1.41815504,
                                1.417818427, 1.417471897, 1.417112559, 1.416738066, 1.416346602,
                                1.415936863, 1.415508046, 1.415059829, 1.414592355, 1.41410621,
                                1.413602403, 1.413082337, 1.412547791, 1.412000885, 1.411444054,
                                1.410880015, 1.410311734, 1.40974239, 1.409175337, 1.408614066,
                                1.408062163, 1.40752327, 1.407001038, 1.406499087, 1.406020956,
                                1.405570065, 1.405149661, 1.40476278, 1.404412198, 1.404100388,
                                1.403829476, 1.403601203, 1.403416881, 1.40327736, 1.40318299,
                                1.40318299, 1.403133596, 1.403128446, 1.403166233, 1.403245055,
                                1.403362408, 1.403515176, 1.403699635};

  const G4int NUMENTRIES_ref = 501;

  G4double ENERGY_ref[NUMENTRIES_ref] = { 1.7712e-09, 1.77374e-09, 1.77628e-09, 1.77883e-09, 1.78138e-09, 1.78395e-09,
                                          1.78652e-09, 1.78909e-09, 1.79168e-09, 1.79427e-09, 1.79687e-09, 1.79948e-09,
                                          1.8021e-09, 1.80472e-09, 1.80735e-09, 1.80999e-09, 1.81263e-09, 1.81529e-09,
                                          1.81795e-09, 1.82062e-09, 1.8233e-09, 1.82598e-09, 1.82868e-09, 1.83138e-09,
                                          1.83409e-09, 1.8368e-09, 1.83953e-09, 1.84226e-09, 1.845e-09, 1.84775e-09,
                                          1.85051e-09, 1.85328e-09, 1.85605e-09, 1.85883e-09, 1.86162e-09, 1.86442e-09,
                                          1.86723e-09, 1.87005e-09, 1.87287e-09, 1.87571e-09, 1.87855e-09, 1.8814e-09,
                                          1.88426e-09, 1.88713e-09, 1.89e-09, 1.89289e-09, 1.89578e-09, 1.89869e-09,
                                          1.9016e-09, 1.90452e-09, 1.90745e-09, 1.91039e-09, 1.91334e-09, 1.91629e-09,
                                          1.91926e-09, 1.92224e-09, 1.92522e-09, 1.92821e-09, 1.93122e-09, 1.93423e-09,
                                          1.93725e-09, 1.94028e-09, 1.94333e-09, 1.94638e-09, 1.94944e-09, 1.95251e-09,
                                          1.95559e-09, 1.95868e-09, 1.96178e-09, 1.96488e-09, 1.968e-09, 1.97113e-09,
                                          1.97427e-09, 1.97742e-09, 1.98058e-09, 1.98375e-09, 1.98693e-09, 1.99012e-09,
                                          1.99332e-09, 1.99652e-09, 1.99975e-09, 2.00298e-09, 2.00622e-09, 2.00947e-09,
                                          2.01273e-09, 2.016e-09, 2.01929e-09, 2.02258e-09, 2.02589e-09, 2.0292e-09,
                                          2.03253e-09, 2.03587e-09, 2.03921e-09, 2.04257e-09, 2.04594e-09, 2.04933e-09,
                                          2.05272e-09, 2.05612e-09, 2.05954e-09, 2.06297e-09, 2.0664e-09, 2.06985e-09,
                                          2.07331e-09, 2.07679e-09, 2.08027e-09, 2.08377e-09, 2.08728e-09, 2.0908e-09,
                                          2.09433e-09, 2.09787e-09, 2.10143e-09, 2.10499e-09, 2.10857e-09, 2.11217e-09,
                                          2.11577e-09, 2.11939e-09, 2.12302e-09, 2.12666e-09, 2.13031e-09, 2.13398e-09,
                                          2.13766e-09, 2.14135e-09, 2.14506e-09, 2.14877e-09, 2.1525e-09, 2.15625e-09,
                                          2.16e-09, 2.16377e-09, 2.16756e-09, 2.17135e-09, 2.17516e-09, 2.17898e-09,
                                          2.18282e-09, 2.18667e-09, 2.19053e-09, 2.19441e-09, 2.1983e-09, 2.20221e-09,
                                          2.20612e-09, 2.21006e-09, 2.214e-09, 2.21796e-09, 2.22194e-09, 2.22593e-09,
                                          2.22993e-09, 2.23395e-09, 2.23798e-09, 2.24203e-09, 2.24609e-09, 2.25017e-09,
                                          2.25426e-09, 2.25836e-09, 2.26249e-09, 2.26662e-09, 2.27077e-09, 2.27494e-09,
                                          2.27912e-09, 2.28332e-09, 2.28753e-09, 2.29176e-09, 2.296e-09, 2.30026e-09,
                                          2.30454e-09, 2.30883e-09, 2.31314e-09, 2.31746e-09, 2.3218e-09, 2.32616e-09,
                                          2.33053e-09, 2.33492e-09, 2.33932e-09, 2.34375e-09, 2.34819e-09,
                                          2.35264e-09, 2.35711e-09, 2.3616e-09, 2.36611e-09, 2.37063e-09, 2.37518e-09,
                                          2.37974e-09, 2.38431e-09, 2.38891e-09, 2.39352e-09, 2.39815e-09, 2.40279e-09,
                                          2.40746e-09, 2.41214e-09, 2.41685e-09, 2.42157e-09, 2.42631e-09, 2.43106e-09,
                                          2.43584e-09, 2.44063e-09, 2.44545e-09, 2.45028e-09, 2.45513e-09, 2.46e-09,
                                          2.46489e-09, 2.4698e-09, 2.47473e-09, 2.47968e-09, 2.48465e-09, 2.48964e-09,
                                          2.49465e-09, 2.49968e-09, 2.50473e-09, 2.5098e-09, 2.51489e-09, 2.52e-09,
                                          2.52514e-09, 2.53029e-09, 2.53546e-09, 2.54066e-09, 2.54588e-09, 2.55112e-09,
                                          2.55638e-09, 2.56166e-09, 2.56696e-09, 2.57229e-09, 2.57763e-09, 2.583e-09,
                                          2.5884e-09, 2.59381e-09, 2.59925e-09, 2.60471e-09, 2.61019e-09, 2.6157e-09,
                                          2.62123e-09, 2.62678e-09, 2.63236e-09, 2.63796e-09, 2.64359e-09, 2.64924e-09,
                                          2.65491e-09, 2.66061e-09, 2.66633e-09, 2.67207e-09, 2.67784e-09, 2.68364e-09,
                                          2.68946e-09, 2.69531e-09, 2.70118e-09, 2.70708e-09, 2.713e-09, 2.71895e-09,
                                          2.72493e-09, 2.73093e-09, 2.73696e-09, 2.74301e-09, 2.7491e-09, 2.7552e-09,
                                          2.76134e-09, 2.7675e-09, 2.7737e-09, 2.77991e-09, 2.78616e-09, 2.79244e-09,
                                          2.79874e-09, 2.80507e-09, 2.81143e-09, 2.81782e-09, 2.82424e-09, 2.83069e-09,
                                          2.83717e-09, 2.84367e-09, 2.85021e-09, 2.85678e-09, 2.86338e-09, 2.87e-09,
                                          2.87666e-09, 2.88335e-09, 2.89007e-09, 2.89683e-09, 2.90361e-09, 2.91043e-09,
                                          2.91728e-09, 2.92416e-09, 2.93107e-09, 2.93801e-09, 2.94499e-09, 2.952e-09,
                                          2.95905e-09, 2.96613e-09, 2.97324e-09, 2.98039e-09, 2.98757e-09, 2.99479e-09,
                                          3.00204e-09, 3.00933e-09, 3.01665e-09, 3.024e-09, 3.0314e-09, 3.03883e-09,
                                          3.04629e-09, 3.0538e-09, 3.06134e-09, 3.06892e-09, 3.07653e-09, 3.08418e-09,
                                          3.09188e-09, 3.0996e-09, 3.10737e-09, 3.11518e-09, 3.12303e-09, 3.13091e-09,
                                          3.13884e-09, 3.14681e-09, 3.15481e-09, 3.16286e-09, 3.17095e-09, 3.17908e-09,
                                          3.18725e-09, 3.19547e-09, 3.20373e-09, 3.21203e-09, 3.22037e-09, 3.22876e-09,
                                          3.23719e-09, 3.24566e-09, 3.25418e-09, 3.26274e-09, 3.27135e-09, 3.28001e-09,
                                          3.28871e-09, 3.29745e-09, 3.30625e-09, 3.31509e-09, 3.32397e-09, 3.33291e-09,
                                          3.34189e-09, 3.35092e-09, 3.36001e-09, 3.36914e-09, 3.37832e-09, 3.38755e-09,
                                          3.39683e-09, 3.40616e-09, 3.41554e-09, 3.42498e-09, 3.43447e-09, 3.44401e-09,
                                          3.4536e-09, 3.46325e-09, 3.47295e-09, 3.4827e-09, 3.49251e-09, 3.50238e-09,
                                          3.5123e-09, 3.52228e-09, 3.53231e-09, 3.54241e-09, 3.55256e-09, 3.56276e-09,
                                          3.57303e-09, 3.58336e-09, 3.59374e-09, 3.60419e-09, 3.6147e-09, 3.62527e-09,
                                          3.6359e-09, 3.64659e-09, 3.65735e-09, 3.66817e-09, 3.67906e-09, 3.69001e-09,
                                          3.70102e-09, 3.7121e-09, 3.72325e-09, 3.73446e-09, 3.74575e-09, 3.7571e-09,
                                          3.76852e-09, 3.78001e-09, 3.79157e-09, 3.8032e-09, 3.8149e-09, 3.82667e-09,
                                          3.83852e-09, 3.85044e-09, 3.86244e-09, 3.87451e-09, 3.88665e-09, 3.89887e-09,
                                          3.91117e-09, 3.92355e-09, 3.93601e-09, 3.94854e-09, 3.96116e-09, 3.97385e-09,
                                          3.98663e-09, 3.99949e-09, 4.01243e-09, 4.02546e-09, 4.03857e-09, 4.05177e-09,
                                          4.06506e-09, 4.07843e-09, 4.09189e-09, 4.10544e-09, 4.11908e-09, 4.13281e-09,
                                          4.14663e-09, 4.16054e-09, 4.17455e-09, 4.18866e-09, 4.20285e-09, 4.21715e-09,
                                          4.23154e-09, 4.24603e-09, 4.26063e-09, 4.27532e-09, 4.29011e-09, 4.30501e-09,
                                          4.32001e-09, 4.33511e-09, 4.35032e-09, 4.36564e-09, 4.38107e-09, 4.3966e-09,
                                          4.41225e-09, 4.42801e-09, 4.44388e-09, 4.45986e-09, 4.47596e-09, 4.49218e-09,
                                          4.50852e-09, 4.52497e-09, 4.54155e-09, 4.55824e-09, 4.57506e-09, 4.59201e-09,
                                          4.60908e-09, 4.62628e-09, 4.6436e-09, 4.66106e-09, 4.67865e-09, 4.69637e-09,
                                          4.71423e-09, 4.73222e-09, 4.75035e-09, 4.76862e-09, 4.78703e-09, 4.80559e-09,
                                          4.82429e-09, 4.84313e-09, 4.86213e-09, 4.88127e-09, 4.90056e-09, 4.92001e-09,
                                          4.93961e-09, 4.95937e-09, 4.97929e-09, 4.99936e-09, 5.0196e-09, 5.04001e-09,
                                          5.06058e-09, 5.08132e-09, 5.10223e-09, 5.12331e-09, 5.14457e-09, 5.16601e-09,
                                          5.18762e-09, 5.20942e-09, 5.2314e-09, 5.25357e-09, 5.27592e-09, 5.29847e-09,
                                          5.32121e-09, 5.34415e-09, 5.36728e-09, 5.39062e-09, 5.41416e-09, 5.4379e-09,
                                          5.46186e-09, 5.48603e-09, 5.51041e-09, 5.53501e-09, 5.55983e-09, 5.58487e-09,
                                          5.61014e-09, 5.63565e-09, 5.66138e-09, 5.68735e-09, 5.71356e-09, 5.74001e-09,
                                          5.76671e-09, 5.79365e-09, 5.82085e-09, 5.84831e-09, 5.87603e-09, 5.90401e-09,
                                          5.93226e-09, 5.96078e-09, 5.98957e-09, 6.01865e-09, 6.04801e-09, 6.07766e-09,
                                          6.1076e-09, 6.13783e-09, 6.16837e-09, 6.19921e-09 };

  G4double REFLECTIVITY_ref[NUMENTRIES_ref] = { .91867018, .91878821, .91909624, .91933169, .91975042, .91994669,
                                                .92023845, .9205233, .9204163, .92116707, .92116159, .92172474, .92190017,
                                                .9218805, .92234936, .92254988, .9228962, .92306398, .92334575, .92357688,
                                                .92381986, .92396137, .92430164, .92448784, .92465907, .92492628,
                                                .92514583, .92564694, .92586161, .92585568, .92609252, .92623107,
                                                .92653067, .92670681, .9269944, .9271874, .9274472, .92735985, .92774786,
                                                .92797425, .9277678, .9283881, .92882547, .92886619, .92880202, .92926185,
                                                .9291282, .92941198, .9297765, .92971139, .93010272, .93005497, .93035958,
                                                .93064111, .93085596, .93108483, .931252, .93113579, .93144708, .93159892,
                                                .93169539, .93167694, .93210855, .93221407, .93229929, .93217626,
                                                .93261842, .93267996, .9328614, .93305264, .93279379, .93313851, .93334877,
                                                .93357556, .93384519, .93398249, .93397436, .9341664, .93426486, .93431823,
                                                .93442491, .93463716, .93500783, .93516479, .93504207, .93518962,
                                                .93530918, .93544686, .93560372, .93582261, .93591123, .93591639,
                                                .93596435, .93605721, .93621836, .93639598, .93625838, .9365027, .93679588,
                                                .93701544, .93727586, .93736008, .93731122, .93730506, .93732266,
                                                .93737014, .93732351, .93745206, .93774816, .93792166, .9381091, .93814387,
                                                .93829906, .93835502, .93849515, .93874573, .9387148, .93837158, .93857773,
						.9388873, .93908168, .93917556, .93931774, .93956124, .93966123, .93963233,
                                                .93975599, .93985593, .93976342, .93978551, .94003286, .9402512, .94037606,
                                                .94037748, .94046234, .94061184, .94085374, .94105208, .94130384,
                                                .94116635, .94085321, .94089851, .9408085, .94080903, .94106384, .94120388,
                                                .94128558, .94128922, .94135115, .941421, .94151582, .94165153, .94178154,
                                                .94191268, .94201176, .94197218, .94199962, .94206345, .94217231,
                                                .94216899, .94229288, .94235705, .94232253, .94245712, .94255995,
                                                .94256122, .94258842, .9426191, .94280816, .9429058, .94279921, .9427562,
                                                .94297274, .94310444, .94316056, .94319721, .94326782, .94322525,
                                                .94329357, .94328025, .94330324, .94323669, .94327122, .94343237,
                                                .94336868, .94333659, .94338033, .94356735, .94368169, .94355407,
                                                .94343574, .94340561, .94336776, .94315306, .94281768, .94247779,
                                                .94216414, .94205492, .94147018, .94064085, .93994456, .93916984,
                                                .93853796, .93763506, .93648232, .93582235, .93517931, .93426367,
                                                .93344305, .93276234, .93235772, .93186943, .93167268, .93151248,
                                                .93126298, .93117566, .93152638, .93196265, .93244511, .93297256,
                                                .93351183, .93386929, .93437783, .9348046, .93489035, .93494792,
                                                .93507843, .93521117, .9350747, .93552294, .93569038, .93554846,
                                                .9354536, .93516454, .93517806, .9350129, .93488663, .9341786, .93334727,
                                                .9331322, .93240218, .93156117, .9303463, .92941609, .92819197, .92743487,
                                                .92660401, .92548155, .92433372, .92295113, .9223734, .92134051, .92041279,
                                                .91948048, .91850696, .91834416, .9177905, .91734713, .91697977, .9168431,
                                                .91645102, .91564356, .91502549, .91471914, .91375934, .91319727, .9125141,
                                                .91194892, .91117668, .91025524, .90978327, .9090553, .90788165, .90687478,
                                                .90599473, .90530206, .90407009, .90329717, .90225505, .90110879,
                                                .90013234, .89890837, .89790649, .89661338, .89520829, .89373676,
                                                .8926066, .89094177, .88966278, .88799792, .88655118, .8849559, .88305646,
                                                .88077914, .87912389, .8769281, .87467818, .87275388, .87031673, .86773113,
                                                .86518416, .86211943, .85960268, .85638584, .85344267, .85031389,
                                                .84651235, .84253471, .83843647, .83438015, .8299535, .8252885, .82069422,
                                                .81525201, .80920414, .80305407, .79638057, .78943532, .78211256,
                                                .77434004, .76559918, .75566542, .73961647, .72914792, .71985872,
                                                .71870066, .70170831, .67919187, .66317085, .64606509, .62820679,
                                                .60919403, .58910818, .56816265, .54628183, .52432657, .50238826,
                                                .48064867, .46011777, .44105821, .42452535, .41061547, .39954065,
                                                .3917797, .38732376, .38664667, .38903143, .39417775, .40172204,
                                                .41096687, .42153995, .43298425, .444908, .45674237, .46857062, .47960048,
                                                .49011047, .50008499, .50912678, .51714986, .52463473, .53124773,
                                                .53694391, .54214078, .54641626, .54989054, .55281175, .55503411,
                                                .55669049, .55809089, .55879853, .55877649, .55851489, .55789731,
                                                .55664089, .55494965, .55270052, .55014417, .5472109, .54343811,
                                                .5396432, .53571113, .53331219, .53202828, .52733801, .52234025, .5171219,
                                                .51148939, .50605254, .50016304, .49404896, .48785501, .48143283,
                                                .47467895, .46746983, .46018764, .45290908, .44542634, .43792217, .4304205,
                                                .42264221, .41504135, .4076822, .40020852, .39292485, .38603477, .37930307,
                                                .37291234, .36670246, .36064879, .35528691, .3501708, .34529849, .34082121,
                                                .33655095, .33245391, .32863984, .32495056, .32138775, .31821843,
                                                .31533121, .31223797, .309226, .30649842, .3038037, .30125075, .29874417,
                                                .29637182, .29410163, .29184399, .28967887, .28748432, .28537412,
                                                .28336286, .28142074, .27952112, .27763106, .27554904, .27355905,
                                                .27163331, .26961636, .26755006, .26539136, .26322431, .26095423,
                                                .25867645, .25637042, .25402191, .25155426, .24900057, .24639498,
                                                .24353394, .24069377, .2378243, .23489127, .23185162, .22876163, .22581776,
                                                .22300379, .22014197, .21738425, .21477526, .21218674, .20982489,
                                                .20741723, .20509995, .2028618, .20063595, .19845714, .19625256, .19407225,
                                                .19188555, .18965879, .18715538, .18485834, .18247306, .17989033,
                                                .17730006, .1747415, .17203123, .1693376, .166481, .1636511, .16081017,
                                                .1578858, .15510825, .15234954, .14960043, .14689829, .1443013, .14181921,
                                                .13937926, .13699244, .13469614, .13258739, .13064613, .12895495,
                                                .12757626, .12645281, .12563377, .12518963};


  ////////////AIR//////////////////////                                            
  a = 14.01*g/mole;
  G4Element* elN
    = new G4Element("Nitrogen","N", 7,a);

  a = 16.00*g/mole;
  G4Element* elO
    = new G4Element("Oxygen","O", 8,a);

  density = 1.290*mg/cm3;
  G4Material* Air1
    = new G4Material("Air",density,2);
  Air1->AddElement(elN, 70.*perCent);
  Air1->AddElement(elO, 30.*perCent);

  G4MaterialPropertiesTable *myMPT2 = new G4MaterialPropertiesTable();
  myMPT2->AddProperty("RINDEX", ENERGY_water, RINDEX_air, NUMENTRIES_water);

  Air1->SetMaterialPropertiesTable(myMPT2);

  /////////////////////////// Aborber/////////
  G4double absorberThickness = 1.0*mm;
  G4double absorberheight = absorberThickness/2.;
  a = 1.01*g/mole;
  G4Element* elH
    = new G4Element("Hydrogen","H", 1,a);

  G4Element *elC = new G4Element("Carbon", "C", 6, 12.01*g/mole);

  density = 0.96*g/cm3;
  G4Material *absorberMaterial = new G4Material("customAbsorber", density, 2);

  absorberMaterial->AddElement(elC, 1);
  absorberMaterial->AddElement(elH, 4);

  G4MaterialPropertiesTable* absorberProperties = new G4MaterialPropertiesTable();
  G4MaterialPropertiesTable* mptWorld = new G4MaterialPropertiesTable();

  absorberProperties->AddProperty("ABSLENGTH", photonEnergy, absorption, numEntries);
  mptWorld->AddProperty("RINDEX", photonEnergy, rindexWorld, numEntries);
  mptWorld->AddProperty("ABSLENGTH", photonEnergy, absorption, numEntries);

  absorberMaterial->SetMaterialPropertiesTable(absorberProperties);
  Air->SetMaterialPropertiesTable(mptWorld);

  G4OpticalSurface*  AbsorberSkinSurface = new G4OpticalSurface("AbsorberSurface");
  AbsorberSkinSurface->SetType(dielectric_metal);
  AbsorberSkinSurface->SetModel(unified);
  AbsorberSkinSurface->SetFinish(polished);

  G4MaterialPropertiesTable *absMaterial = new G4MaterialPropertiesTable();
  absMaterial->AddProperty("REFLECTIVITY", ENERGY_water, ABSORBER_ref, NUMENTRIES_water);
  AbsorberSkinSurface->SetMaterialPropertiesTable(absMaterial);

  /////////////////////Aluminum///////////////////                                                                          
  a = 26.98*g/mole;
  G4Element* elAl = new G4Element("Aluminum", "Al", 13, a);

  density = 2.7*g/cm3;
  G4Material* Aluminum
    = new G4Material("Aluminum",density,1);
  Aluminum->AddElement(elAl, 1);

  G4OpticalSurface*  innerReflectorSkinSurface = new G4OpticalSurface("ReflectorSurface");
  innerReflectorSkinSurface->SetType(dielectric_metal);
  innerReflectorSkinSurface->SetModel(unified);
  innerReflectorSkinSurface->SetFinish(polished);

  G4OpticalSurface*  outerReflectorSkinSurface = new G4OpticalSurface("ReflectorSurface");
  outerReflectorSkinSurface->SetType(dielectric_metal);
  outerReflectorSkinSurface->SetModel(unified);
  outerReflectorSkinSurface->SetFinish(polished);


  G4MaterialPropertiesTable *ref = new G4MaterialPropertiesTable();
  ref->AddProperty("REFLECTIVITY", ENERGY_ref, REFLECTIVITY_ref, NUMENTRIES_ref);
  innerReflectorSkinSurface->SetMaterialPropertiesTable(ref);
  outerReflectorSkinSurface->SetMaterialPropertiesTable(ref);
  Aluminum->SetMaterialPropertiesTable(ref);


  /////////PMT Glass Material///////////////                                            
  density = 2.20*g/cm3;
  G4Material* SiO2 = new G4Material("SiO2", density, 2);
  SiO2->AddElement(nist->FindOrBuildElement("Si"), 1);
  SiO2->AddElement(nist->FindOrBuildElement("O"), 2);

  a = 10.81*g/mole;
  G4Element* B = new G4Element("Boron", "B", 5, a);

  density= 2.46*g/cm3;
  G4Material* B2O3 = new G4Material("B2O3", density, 2);
  B2O3->AddElement(nist->FindOrBuildElement("B"), 2);
  B2O3->AddElement(nist->FindOrBuildElement("O"), 3);

  a = 22.99*g/mole;
  G4Element* Na = new G4Element("Sodium", "Na", 11, a);

  density= 2.47*g/cm3;
  G4Material* Na2O = new G4Material("Na2O", density, 2);
  Na2O->AddElement(nist->FindOrBuildElement("Na"), 2);
  Na2O->AddElement(nist->FindOrBuildElement("O"), 1);

  density= 4.00*g/cm3;
  G4Material* Al2O3 = new G4Material("Al2O3", density, 2);
  Al2O3->AddElement(nist->FindOrBuildElement("Al"), 2);
  Al2O3->AddElement(nist->FindOrBuildElement("O"), 3);

  density = 2.23*g/cm3;
  G4Material* PMTGlass = new G4Material("PMTGlass", density, 4);
  PMTGlass->AddMaterial(SiO2, 80.6*perCent);
  PMTGlass->AddMaterial(B2O3, 13.0*perCent);
  PMTGlass->AddMaterial(Na2O, 4.0*perCent);
  PMTGlass->AddMaterial(Al2O3, 2.4*perCent);

  G4MaterialPropertiesTable *myMPT5 = new G4MaterialPropertiesTable();
  myMPT5->AddProperty("RINDEX", ENERGY_glass, RINDEX_glass2, 45);
  myMPT5->AddProperty("ABSLENGTH",ENERGY_glass, ABSORPTION_glass2, 45);
  PMTGlass->SetMaterialPropertiesTable(myMPT5);
  //////////////////Silica Gel////////////////////
  a = 28.09*g/mole;
  G4Element* elSi = new G4Element("Silicon", "Si", 14., a);

  density = 0.98*g/cm3;
  G4Material *SilGel
    = new G4Material("SilGel",density,1);
  SilGel->AddElement(elSi, 1);

  G4MaterialPropertiesTable *SilGelPropTable = new G4MaterialPropertiesTable();
  SilGelPropTable->AddProperty("RINDEX", ENERGY_SilGel, RINDEX_SilGel, 87);
  SilGelPropTable->AddProperty("ABSLENGTH",ENERGY_SilGel, ABSORPTION_SilGel, 87);
  SilGel->SetMaterialPropertiesTable(SilGelPropTable);

  //////////////////////////////////////////////////////////////                                                             
  G4double pmtGlassThickness = 2.0*mm;
  G4double pmtGlassRadius = 53.0*mm;
  G4double pmtCylRadius = 40.15*mm;
  G4double pmtTubeRadius = 26.1*mm;
  G4double pmtCylHeight = 18.0*mm;
  G4double pmtConeHeight = 20.0*mm;

  G4double matrxiRadius = 325.603*mm;
  G4double pmtTotalHeight = absorberThickness + pmtConeHeight + pmtCylHeight + 23.6*mm;
  G4double openingAngle = 8.14*deg;
  G4double zoffset = 274.003*mm;

  G4Sphere *solidWorld = new G4Sphere("solidWorld",
                                         matrxiRadius-pmtTotalHeight,
                                         matrxiRadius,
                                         0.0*deg, 360.0*deg,
                                         0.0, openingAngle);

  
  //  G4Box *solidWorld = new G4Box("solidInSitumPMT", 0.25*m, 0.25*m, .25*m);
  // G4double zPlanesCylinder[4] = {-pmtConeHeight/2.-absorberThickness, pmtConeHeight/2., pmtConeHeight/2.+pmtCylHeight, 46.5};
  // G4double rInnerCylinder[4] = {0, 0, 0, 0};
  // G4double rOuterCylinder[4] = {pmtTubeRadius, pmtCylRadius, pmtCylRadius, 46.};
  // G4Polycone* solidWorld = new G4Polycone("solidWorld",
  //                                         0,
  //                                         2 * M_PI,
  //                                         4,
  //                                         zPlanesCylinder,
  //                                         rInnerCylinder,
  //                                         rOuterCylinder);

  G4LogicalVolume* logicWorld = new G4LogicalVolume(solidWorld,
						    SilGel,
						    "logicWorld");

  G4VisAttributes* invisible = new G4VisAttributes(false);
  logicWorld->SetVisAttributes(invisible);
  logicWorld->SetSensitiveDetector(NULL);

  G4VPhysicalVolume* physWorld = new G4PVPlacement(0,
                                                   G4ThreeVector(0.,0.,0.),
                                                   logicWorld,
                                                   "physWorld",
                                                   0,
                                                   false,
                                                   0,
                                                   true);
  
  
  ///////////////////////////Making Outer PMT/////////////////////                                                         
  G4Cons *coneSolid = new G4Cons("coneSolid",
                                 pmtTubeRadius-pmtGlassThickness,
                                 pmtTubeRadius,
                                 pmtCylRadius-pmtGlassThickness,
                                 pmtCylRadius,
                                 pmtConeHeight/2.,
                                 0.*deg, 360.*deg);

  G4Tubs *tubeSolid = new G4Tubs("tubeSolid",
                                 pmtCylRadius-pmtGlassThickness,
                                 pmtCylRadius,
                                 pmtCylHeight/2.,
                                 0.*deg, 360.*deg);

  G4VSolid *combineSolid1 = new G4UnionSolid("tubeCombined",
                                             coneSolid,
                                             tubeSolid,
                                             0,
                                             G4ThreeVector(0.,0.,(pmtConeHeight+pmtCylHeight)/2.));


  G4Box *solidCutOff = new G4Box("cutOffBox",
                                 pmtGlassRadius+1.*cm,
                                 pmtGlassRadius+1.*cm,
                                 34.597*mm);

  G4Sphere *pmtGlassSolid = new G4Sphere("pmtGlassSolid",
                                         pmtGlassRadius-pmtGlassThickness,
                                         pmtGlassRadius,
                                         0.0*deg, 360.0*deg,
                                         0.0, 90*deg);

  G4VSolid *pmtBulb = new G4SubtractionSolid("pmtGlass",
                                             pmtGlassSolid,
                                             solidCutOff);

  G4Transform3D transform(G4Translate3D(0.0, 0.0, -6.597*mm));
  
  G4LogicalVolume *pmtBulbLogic = new G4LogicalVolume(pmtBulb,
						      PMTGlass,
						      "pmtBulbLogic");
  
  G4VPhysicalVolume *pmtPhysBulb = new G4PVPlacement(0,
                                                   G4ThreeVector(0.,0.,-6.597*mm+zoffset),
                                                   pmtBulbLogic,
                                                   "pmtPhysBulb",
                                                   logicWorld,
                                                   false,
                                                   0,
                                                   true);
  
  
  // combineSolid2 = new G4UnionSolid("OuterPMT",
	// 			   combineSolid1,
	// 			   pmtBulb,
	// 			   transform);
  /*
  G4Tubs *pmtBase = new G4Tubs("pmtBase",
				0.*mm,
				pmtTubeRadius,
				0.5*mm,
				0.*deg, 360.*deg);
  
  G4VSolid *combineSolid3 = new G4UnionSolid("CombinedSolid3",
                                             combineSolid2,
                                             pmtBase,
                                             0,
                                             G4ThreeVector(0.,0.,-9.5*mm));
  */
  G4LogicalVolume *pmtBaseLogic = new G4LogicalVolume(combineSolid1,
						      PMTGlass,
                                                      "pmtBaseLogic");
  
  
  G4VPhysicalVolume *totalPMT = new G4PVPlacement(0,
						  G4ThreeVector(0.,0.,0.*mm+zoffset),
						  pmtBaseLogic,
						  "totalPMT",
						  logicWorld,
						  false,
						  0,
						  true);
  /////////////////////PMT Absorber//////////////////////////////////////
  
  G4Cons* absorberSolid = new G4Cons("solidAbsorber",
                                     0.0,
                                     pmtTubeRadius,
                                     0.0,
                                     pmtTubeRadius,
                                     absorberThickness/2.,
                                     0.0, 360.0*deg);

  
  G4LogicalVolume *absorberLogic = new G4LogicalVolume(absorberSolid,
						       absorberMaterial,
						       "absorberLogic");

  //G4LogicalSkinSurface* AbsorberSurfaceProperties = new G4LogicalSkinSurface("AbsorberSurfaceProperties", absorberLogic, AbsorberSkinSurface);


  G4VPhysicalVolume *pmtAbsorber = new G4PVPlacement(0,
						     G4ThreeVector(0.,0.,-absorberThickness/2.-pmtConeHeight/2.+zoffset),
						     absorberLogic,
						     "pmtAbsorber",
						     logicWorld,
						     false,
						     0,
						     true);

  
  
  //////////////////Adding reflector on top of the PMT///////////////////////           
  
  G4Cons *refSolid = new G4Cons("refSolid",
				36.96*mm,
                                37.76*mm,
                                45.*mm,
                                45.8*mm,
                                6.5*mm,
                                0.*deg, 360.*deg);

  
  G4LogicalVolume *pmtReflectorLogic = new G4LogicalVolume(refSolid,
							   Aluminum,
							   "pmtReflectorLogic");
  
  G4LogicalSkinSurface* outerReflectorLogSkinSurface = new G4LogicalSkinSurface("outerReflectorLogSkinSurface", pmtReflectorLogic, outerReflectorSkinSurface);  

  G4VPhysicalVolume *pmtPhysReflector = new G4PVPlacement(0,
							  G4ThreeVector(0.,0.,39.9*mm+zoffset),
							  pmtReflectorLogic,
							  "pmtPhysReflector",
							  logicWorld,
							  false,
							  0,
							  true);
  
  
  //////////////Adding inner surface to the PMT//////////////////////
  
  G4Cons *innerSolidCone = new G4Cons("innerPmtCone",
				      0.,
				      pmtTubeRadius-pmtGlassThickness-0.1*mm,
				      0.,
				      pmtCylRadius-pmtGlassThickness-0.1*mm,
				      pmtConeHeight/2.*mm,
				      0.*deg, 360.*deg);

  G4Tubs *innerSolidTube = new G4Tubs("innerSolidTube",
				      0.,
				      pmtCylRadius-pmtGlassThickness,
				      pmtCylHeight/2.,
				      0.*deg, 360.*deg);
  
  G4VSolid *combineSolid5 = new G4UnionSolid("CombinedSolid5",
                                             innerSolidCone,
                                             innerSolidTube,
                                             0,
                                             G4ThreeVector(0.,0.,(pmtConeHeight+pmtCylHeight)/2.));
  
  G4LogicalVolume *pmtInnerTubeLogic = new G4LogicalVolume(combineSolid5,
							   Air1,
							   "pmtInnerTubeLogic");
  
  G4VPhysicalVolume *pmtPhysInnerTube = new G4PVPlacement(0,
							  G4ThreeVector(0.,0.,0.0*mm+zoffset),
							  pmtInnerTubeLogic,
							  "pmtPhysInnerTube",
							  logicWorld,
							  false,
							  0,
							  true);
  
  G4Sphere *pmtInnerGlassSolid = new G4Sphere("pmtInnerglassSolid",
                                              0.*mm,
                                              pmtGlassRadius-pmtGlassThickness,
                                              0.0*deg, 360.0*deg,
					      0.0, 90.*deg);
  
  G4Box *boxCutOff = new G4Box("cutOffTubs",
                               pmtGlassRadius+1.*cm,
                               pmtGlassRadius+1.*cm,
                               34.597*mm);


  G4SubtractionSolid *pmtInnerGlass = new G4SubtractionSolid("pmtInnerglass",
							     pmtInnerGlassSolid,
							     boxCutOff);
  
  G4LogicalVolume *pmtInnerBulbLogic = new G4LogicalVolume(pmtInnerGlass,
							   //combineSolid4,
							   Air1,
							   "pmtInnerBulbLogic");
  
  G4VPhysicalVolume *pmtInnerPhysBulb = new G4PVPlacement(0,
							  G4ThreeVector(0.,0.,-6.597*mm+zoffset),
							  pmtInnerBulbLogic,
							  "pmtInnerPhysBulb",
							  logicWorld,
							  false,
							  0,
							  true);


  //////////////////Optical photocathode surface and its properties////////////////////////          
  
  const G4int NUM = 2;

  G4OpticalSurface* OpGlassCathodeSurface =  new G4OpticalSurface("GlassCathodeSurface");
  OpGlassCathodeSurface->SetType(dielectric_dielectric);
  OpGlassCathodeSurface->SetModel(unified);
  OpGlassCathodeSurface->SetFinish(polished);


  G4OpticalSurface* OpCathodeAirSurface =  new G4OpticalSurface("CathodeAirSurface");
  OpCathodeAirSurface->SetType(dielectric_dielectric);
  OpCathodeAirSurface->SetModel(unified);
  OpCathodeAirSurface->SetFinish(polished);

  G4double RINDEX_cathode[NUM] = { 1.0, 1.0 };
  G4double PP[NUM] = { 1.4E-9*GeV,6.2E-9*GeV};
  G4double RGCFF = 0.32;
  //  RGCFF = WCSimTuningParams->GetRgcff();                                      
  G4double REFLECTIVITY_glasscath[NUM] = { 1.0*RGCFF, 1.0*RGCFF };
  G4double EFFICIENCY_glasscath[NUM] = { 0.0, 0.0 };
  G4int COATEDFRUSTRATEDTRANSMISSION_glasscath = 1;

  const G4int NUMSK = 6;
  G4double ENERGY_COATED_SK[NUMSK] =
    {
      1.000*eV, 2.786*eV, 3.061*eV, 3.306*eV, 3.679*eV, 9.000*eV
    };
  // Real refractive index of photocathode film                                                                             
  G4double COATEDRINDEX_glasscath_SK[NUMSK] =
    { 3.4, 3.4, 3.1, 2.8, 2.4, 2.4 };
  // Imaginary refractive index of photocathode film                                                                        
  G4double COATEDRINDEXIM_glasscath_SK[NUMSK] =
    { 1.7, 1.7, 1.6, 1.5, 1.4, 1.4 };
  // Thickness of photocathode film                                                                                         
  G4double COATEDTHICKNESS_glasscath_SK = 11.5*nm;
  const G4int NUMWAV = 23;
  G4double ENERGY_COATED_WAV[NUMWAV] =
    {
      1.000*eV, 1.823*eV, 1.864*eV, 1.907*eV, 1.953*eV,
      2.000*eV, 2.049*eV, 2.101*eV, 2.156*eV, 2.214*eV,
      2.275*eV, 2.339*eV, 2.407*eV, 2.480*eV, 2.556*eV,
      2.638*eV, 2.725*eV, 2.818*eV, 2.917*eV, 3.024*eV,
      3.139*eV, 3.263*eV, 9.000*eV
    };
  G4double COATEDRINDEX_glasscath_KCsCb[NUMWAV] =
    {
      2.96, 2.96, 2.95, 2.95, 2.95,
      2.96, 2.98, 3.01, 3.06, 3.12,
      3.20, 3.26, 3.09, 3.00, 3.00,
      3.00, 2.87, 2.70, 2.61, 2.38,
      2.18, 1.92, 1.92
    };
  G4double COATEDRINDEXIM_glasscath_KCsCb[NUMWAV] =
    {
      0.33, 0.33, 0.34, 0.34, 0.35,
      0.37, 0.38, 0.42, 0.46, 0.53,
      0.63, 0.86, 1.05, 1.06, 1.11,
      1.34, 1.44, 1.50, 1.53, 1.71,
      1.69, 1.69, 1.69
    };
  G4double COATEDTHICKNESS_glasscath_KCsCb = 15.5*nm;

  G4double COATEDRINDEX_glasscath_RbCsCb[NUMWAV] =
    {
      3.13, 3.13, 3.14, 3.14, 3.15,
      3.18, 3.22, 3.28, 3.39, 3.32,
      3.23, 3.21, 3.22, 3.16, 2.99,
      2.81, 2.63, 2.50, 2.40, 2.30,
      2.22, 2.07, 2.07
    };
  G4double COATEDRINDEXIM_glasscath_RbCsCb[NUMWAV] =
    {
      0.35, 0.35, 0.37, 0.37, 0.38,
      0.40, 0.43, 0.46, 0.59, 0.76,
      0.86, 0.90, 1.04, 1.21, 1.37,
      1.41, 1.40, 1.35, 1.27, 1.21,
      1.17, 1.22, 1.22
    };

  G4double COATEDTHICKNESS_glasscath_RbCsCb = 23.4*nm;
  //Glass to Cathode surface inside PMTs                          
  G4MaterialPropertiesTable *myST2 = new G4MaterialPropertiesTable();
  myST2->AddProperty("RINDEX", PP, RINDEX_cathode, NUM);
  myST2->AddProperty("REFLECTIVITY", PP, REFLECTIVITY_glasscath, NUM);
  myST2->AddProperty("EFFICIENCY", PP, EFFICIENCY_glasscath, NUM);

  // In order to use new photocathode physics                            
  G4int pmtsurftype = WCSimTuningParams->GetPMTSurfType(); // Choose one of the two models, see WCSimOpBoundaryProcess for m\odel details                 
  G4cout<<"PMT SURFACE == "<<pmtsurftype<<G4endl;
  if (pmtsurftype==1)
    {
      OpGlassCathodeSurface->SetType(G4SurfaceType(101));
    }
  else if (pmtsurftype==2)
    {
      OpGlassCathodeSurface->SetType(G4SurfaceType(102));
    }
  else if (pmtsurftype!=0)
    {
      printf("Invalid PMT photocathode surface optical model choice: %i, use the default dielectric model\n",pmtsurftype);
      pmtsurftype = 0;
    }
  if (pmtsurftype!=0)
    {
      G4int cathodepara = WCSimTuningParams->GetCathodePara(); // Choose predefined set of optical parameters    
      G4cout<<"CATHODE PARAMETER == "<<cathodepara<<G4endl;
      if (cathodepara==0)
        {
          printf("Use SK cathode optical parameters\n");
          myST2->AddProperty("COATEDRINDEX", ENERGY_COATED_SK, COATEDRINDEX_glasscath_SK, NUMSK);
          myST2->AddProperty("COATEDRINDEXIM", ENERGY_COATED_SK, COATEDRINDEXIM_glasscath_SK, NUMSK);
          myST2->AddConstProperty("COATEDTHICKNESS", COATEDTHICKNESS_glasscath_SK);
          myST2->AddConstProperty("COATEDFRUSTRATEDTRANSMISSION", COATEDFRUSTRATEDTRANSMISSION_glasscath);
        }
      else if (cathodepara==1)
        {
          printf("Use KCsCb cathode optical parameters\n");
          myST2->AddProperty("COATEDRINDEX", ENERGY_COATED_WAV, COATEDRINDEX_glasscath_KCsCb, NUMWAV);
          myST2->AddProperty("COATEDRINDEXIM", ENERGY_COATED_WAV, COATEDRINDEXIM_glasscath_KCsCb, NUMWAV);
          myST2->AddConstProperty("COATEDTHICKNESS", COATEDTHICKNESS_glasscath_KCsCb);
          myST2->AddConstProperty("COATEDFRUSTRATEDTRANSMISSION", COATEDFRUSTRATEDTRANSMISSION_glasscath);
        }
      else if (cathodepara==2)
        {
          printf("Use RbCsCb cathode optical parameters\n");
          myST2->AddProperty("COATEDRINDEX", ENERGY_COATED_WAV, COATEDRINDEX_glasscath_RbCsCb, NUMWAV);
          myST2->AddProperty("COATEDRINDEXIM", ENERGY_COATED_WAV, COATEDRINDEXIM_glasscath_RbCsCb, NUMWAV);
          myST2->AddConstProperty("COATEDTHICKNESS", COATEDTHICKNESS_glasscath_RbCsCb);
          myST2->AddConstProperty("COATEDFRUSTRATEDTRANSMISSION", COATEDFRUSTRATEDTRANSMISSION_glasscath);
        }
      else
        {
          printf("Invalid PMT photocathode surface parameters choice: %i, use the default SK model\n",pmtsurftype);
          myST2->AddProperty("COATEDRINDEX", ENERGY_COATED_SK, COATEDRINDEX_glasscath_SK, NUMSK);
          myST2->AddProperty("COATEDRINDEXIM", ENERGY_COATED_SK, COATEDRINDEXIM_glasscath_SK, NUMSK);
          myST2->AddConstProperty("COATEDTHICKNESS", COATEDTHICKNESS_glasscath_SK);
          myST2->AddConstProperty("COATEDFRUSTRATEDTRANSMISSION", COATEDFRUSTRATEDTRANSMISSION_glasscath);
        }
    }


  OpGlassCathodeSurface->SetMaterialPropertiesTable(myST2);
  OpCathodeAirSurface->SetMaterialPropertiesTable(myST2);

  G4LogicalBorderSurface* GlassCathodeSurface = new G4LogicalBorderSurface("GlassCathodeSurface", pmtPhysBulb, pmtInnerPhysBulb, OpGlassCathodeSurface);

  G4LogicalBorderSurface* CathodeAirSurface = new G4LogicalBorderSurface("CathodeAirSurface", pmtInnerPhysBulb, pmtPhysBulb, OpCathodeAirSurface);
  
  ///////////////PMT INNER REFLECTOR/////////////////////////

  G4Cons *solidConeTube = new G4Cons("ConeTube",
				     pmtTubeRadius-pmtGlassThickness-0.1*mm,
				     pmtTubeRadius-pmtGlassThickness,
				     pmtCylRadius-pmtGlassThickness-0.1*mm,
				     pmtCylRadius-pmtGlassThickness,
				     pmtConeHeight/2.,
				     0.*deg, 360.*deg);


  G4LogicalVolume *logicLayer = new G4LogicalVolume(solidConeTube,
                                                    Aluminum,
                                                    "logicLayer");

  G4LogicalSkinSurface* innerReflectorLogSkinSurface = new G4LogicalSkinSurface("innerReflectorLogSkinSurface", logicLayer, innerReflectorSkinSurface);


  G4VisAttributes *layerAttributes = new G4VisAttributes();
  layerAttributes->SetColor(0.85, 0.85, 0.85, 1.0);
  layerAttributes->SetVisibility(true);
  layerAttributes->SetForceSolid(true);
  logicLayer->SetVisAttributes(layerAttributes);

  G4VPhysicalVolume *innerReflector = new G4PVPlacement(0,
							G4ThreeVector(0.,0.,0.+zoffset),
							logicLayer,
							"innerReflector",
							logicWorld,
							false,
							0,
							true);


  return logicWorld;

}

G4VPhysicalVolume *inSituPMTConstruction::Construct()
{

  return nullptr;
}

